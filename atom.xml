<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Eugene Su</title>
  
  
  <link href="/Blog/atom.xml" rel="self"/>
  
  <link href="http://eugenesu0515.github.io/"/>
  <updated>2018-07-11T19:40:38.697Z</updated>
  <id>http://eugenesu0515.github.io/</id>
  
  <author>
    <name>Eugene Su</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Vue套件介紹：axios</title>
    <link href="http://eugenesu0515.github.io/2018/06/25/Vue%E5%A5%97%E4%BB%B6%E4%BB%8B%E7%B4%B9%EF%BC%9Aaxios/"/>
    <id>http://eugenesu0515.github.io/2018/06/25/Vue套件介紹：axios/</id>
    <published>2018-06-25T09:58:30.000Z</published>
    <updated>2018-07-11T19:40:38.697Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前提情要"><a href="#前提情要" class="headerlink" title="前提情要"></a>前提情要</h2><hr><a id="more"></a><h2 id="內容"><a href="#內容" class="headerlink" title="內容"></a>內容</h2><hr><h2 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h2><hr><h2 id="前提情要-1"><a href="#前提情要-1" class="headerlink" title="前提情要"></a>前提情要</h2><hr><p>筆者在公司的專案開發上選擇vue作為前端開發framework，不外呼就是開發應用程式，當然免不了基本的CRUD功能，此時需要一個強而有力的呼叫API套件，之所以選擇<code>axios</code>，沒有爾外的原因，因為是vue作者推薦使用，這樣不需有任何的疑慮，用下去就對了，此篇就以<code>axios</code>來探討其用法介紹及經驗分享。<br><!-- more --></p><h2 id="內容-1"><a href="#內容-1" class="headerlink" title="內容"></a>內容</h2><hr><!-- toc --><h3 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h3><p>我們要在專案上使用第一部就是使用<code>npm</code>來安裝它<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install axios</div></pre></td></tr></table></figure></p><p>若要在component上套用axios則，需先import它<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span>;</div></pre></td></tr></table></figure></p><p>接下來我們先來看一下簡單的get指令<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Make a request for a user with a given ID</span></div><div class="line">axios.get(<span class="string">'/user?ID=12345'</span>)</div><div class="line">  .then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(response);</div><div class="line">  &#125;)</div><div class="line">  .catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(error);</div><div class="line">  &#125;);</div></pre></td></tr></table></figure></p><h3 id="建立axios實體"><a href="#建立axios實體" class="headerlink" title="建立axios實體"></a>建立axios實體</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> instance = axios.create(&#123;</div><div class="line">  baseURL: <span class="string">'https://some-domain.com/api/'</span>,</div><div class="line">  timeout: <span class="number">1000</span>,</div><div class="line">  headers: &#123;<span class="string">'X-Custom-Header'</span>: <span class="string">'foobar'</span>&#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>視情況會使用到自己宣告出來的axios實體，筆者遇到的情形是</p><ol><li>呼叫不同的API站台時</li><li>需要有獨立的config設定時</li></ol><h3 id="alias別名-簡寫"><a href="#alias別名-簡寫" class="headerlink" title="alias別名(簡寫)"></a>alias別名(簡寫)</h3><p>以上使用到<code>axios</code>所提供的簡寫功能<code>get</code>，axios提供我們會常用到<code>http action</code>的簡寫宣告</p><ul><li>axios.request(config)</li><li>axios.get(url[, config])</li><li>axios.delete(url[, config])</li><li>axios.head(url[, config])</li><li>axios.options(url[, config])</li><li>axios.post(url[, data[, config]])</li><li>axios.put(url[, data[, config]])</li><li>axios.patch(url[, data[, config]])</li></ul><h3 id="Config項目介紹"><a href="#Config項目介紹" class="headerlink" title="Config項目介紹"></a>Config項目介紹</h3><p>接下來介紹有哪些config可以設定，先來看一下一般的宣告方式<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Send a POST request</span></div><div class="line">axios(&#123;</div><div class="line">  method: <span class="string">'post'</span>,</div><div class="line">  url: <span class="string">'/user/12345'</span>,</div><div class="line">  data: &#123;</div><div class="line">    firstName: <span class="string">'Fred'</span>,</div><div class="line">    lastName: <span class="string">'Flintstone'</span></div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p><p>完整的config項目列表，其中<code>url</code>為必填之外，其他為選填項目，筆者盡量以自己的理解的方式寫上註解<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="comment">// 欲呼叫的目標API的URL</span></div><div class="line">    url: <span class="string">'/user'</span>,</div><div class="line"></div><div class="line">    <span class="comment">// http action(對應到api定義的http action)</span></div><div class="line">    <span class="comment">// 若沒宣告此屬性則，預設為get</span></div><div class="line">    method: <span class="string">'get'</span>, <span class="comment">// default</span></div><div class="line"></div><div class="line">    <span class="comment">// 欲呼叫的目標API的BaseUrl</span></div><div class="line">    <span class="comment">// 假設API網址有</span></div><div class="line">    <span class="comment">// http://localhost:5000/api/user</span></div><div class="line">    <span class="comment">// http://localhost:5000/api/user/5</span></div><div class="line">    <span class="comment">// 對我們來說以上兩個API的BaseUrl為http://localhost:5000/api</span></div><div class="line">    baseURL: <span class="string">'https://some-domain.com/api/'</span>,</div><div class="line"></div><div class="line">    <span class="comment">// 傳送server端之前，可以透過此function撰寫統一處理邏輯</span></div><div class="line">    <span class="comment">// 只支援於http action如put、post、patch</span></div><div class="line">    <span class="comment">// 最後必須回傳處理過後的request封包，形式可為string/buffer/fomdata/stream等</span></div><div class="line">    transformRequest: [<span class="function"><span class="keyword">function</span> (<span class="params">data, headers</span>) </span>&#123;</div><div class="line">        <span class="comment">// Do whatever you want to transform the data</span></div><div class="line"></div><div class="line">        <span class="keyword">return</span> data;</div><div class="line">    &#125;],</div><div class="line"></div><div class="line">    <span class="comment">// 如同transformRequest，這個是針對response做處理</span></div><div class="line">    transformResponse: [<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</div><div class="line">        <span class="comment">// Do whatever you want to transform the data</span></div><div class="line"></div><div class="line">        <span class="keyword">return</span> data;</div><div class="line">    &#125;],</div><div class="line"></div><div class="line">    <span class="comment">// 可自定義header參數</span></div><div class="line">    headers: &#123;</div><div class="line">        <span class="string">'X-Requested-With'</span>: <span class="string">'XMLHttpRequest'</span></div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    <span class="comment">// querystring參數</span></div><div class="line">    params: &#123;</div><div class="line">        ID: <span class="number">12345</span></div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    <span class="comment">// 可自定義parameter serialize的function</span></div><div class="line">    paramsSerializer: <span class="function"><span class="keyword">function</span> (<span class="params">params</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> Qs.stringify(params, &#123;</div><div class="line">            arrayFormat: <span class="string">'brackets'</span></div><div class="line">        &#125;)</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    <span class="comment">// put/post/patch使用，request物件</span></div><div class="line">    data: &#123;</div><div class="line">        firstName: <span class="string">'Fred'</span></div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    <span class="comment">// 自定義request timeout時間，單位為豪秒ms</span></div><div class="line">    timeout: <span class="number">1000</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>以上僅列出部份config項目，完整請參考<a href="https://github.com/axios/axios" target="_blank" rel="external">axios github中的說明</a></p><h3 id="全域設定"><a href="#全域設定" class="headerlink" title="全域設定"></a>全域設定</h3><h4 id="設定方式"><a href="#設定方式" class="headerlink" title="設定方式"></a>設定方式</h4><p><code>axios</code>很貼心的提供了全域設定的功能，等於說有些設定是共用的，可以透過<code>defaults</code>來設定，通常一定會設置一個<code>baseURL</code>，頁面上的呼叫api設定的url就只要設定相對url即可。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">axios.defaults.baseURL = <span class="string">'https://api.example.com'</span>;</div><div class="line">axios.defaults.headers.common[<span class="string">'Authorization'</span>] = AUTH_TOKEN;</div><div class="line">axios.defaults.headers.post[<span class="string">'Content-Type'</span>] = <span class="string">'application/x-www-form-urlencoded'</span>;</div></pre></td></tr></table></figure></p><p>以上只是很簡單的舉了三個例子，第一個是設定baseURL，第二個是將登入成功後取得的token，設定於每次request中的header參數中，第三個是指定post時的content type為html encode過後的，以防腳本攻擊。這些只是簡單的例子，基本上<code>defaults</code>後面可以接上述提到的所有config項目。</p><h4 id="設定優先順序探討"><a href="#設定優先順序探討" class="headerlink" title="設定優先順序探討"></a>設定優先順序探討</h4><p>參考<code>axios</code>github中的<code>Config order of precedence</code></p><ol><li>request當中<code>config</code></li><li><code>defaults</code>關鍵字設定之全域設定</li><li><code>lib/defaults.js</code></li></ol><h3 id="Interceptor攔截器"><a href="#Interceptor攔截器" class="headerlink" title="Interceptor攔截器"></a>Interceptor攔截器</h3><h4 id="使用方式-1"><a href="#使用方式-1" class="headerlink" title="使用方式"></a>使用方式</h4><p>筆者特別想介紹這個部份，此功能非常重要，我們要做什麼事情，有了這個攔截器，根本就是事半功倍阿。簡單來說就是<code>axios</code>開放request前或response得到後事件，方便我們撰寫統一處理邏輯。</p><p>最簡單的應用就是我們在request的時候，無論是取得下拉式選單的data source，設定條件後按下「查詢」取得相對應的資料，都需要等待時間，現代都是求速成，連一秒都不願意等待，需要馬上有feedback，通常我們都會選擇使用<code>顯示loading</code>讓使用者知道我們很努力的在獲取資料。</p><p>這個時候這個攔截器的好處就浮現了，一般沒有攔截器的情況下，我們必須得在每一個request中必須處理<code>顯示loading</code>的邏輯，但這樣一來，重複的程式碼出現在不同地方，需要更改效果時根本就是惡夢阿。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Add a request interceptor</span></div><div class="line">axios.interceptors.request.use(<span class="function"><span class="keyword">function</span> (<span class="params">config</span>) </span>&#123;</div><div class="line">    <span class="comment">// Do something before request is sent</span></div><div class="line">    <span class="keyword">return</span> config;</div><div class="line">  &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</div><div class="line">    <span class="comment">// Do something with request error</span></div><div class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</div><div class="line">  &#125;);</div><div class="line"></div><div class="line"><span class="comment">// Add a response interceptor</span></div><div class="line">axios.interceptors.response.use(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</div><div class="line">    <span class="comment">// Do something with response data</span></div><div class="line">    <span class="keyword">return</span> response;</div><div class="line">  &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</div><div class="line">    <span class="comment">// Do something with response error</span></div><div class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</div><div class="line">  &#125;);</div></pre></td></tr></table></figure><h4 id="移除攔截器"><a href="#移除攔截器" class="headerlink" title="移除攔截器"></a>移除攔截器</h4><p>我們可以使用<code>interceptor攔截器</code>，當然也可以移除它<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//使用const變數宣告request interceptor</span></div><div class="line"><span class="keyword">const</span> myInterceptor = axios.interceptors.request.use(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;<span class="comment">/*...*/</span>&#125;);</div><div class="line"><span class="comment">//將上述interceptor使用eject的方式移除</span></div><div class="line">axios.interceptors.request.eject(myInterceptor);</div></pre></td></tr></table></figure></p><p>筆者當初看到這個說明會覺得不會使用到它，直到有些頁面中有<code>autocomplete</code>功能時，就會用上它了。我們專案的情境是我們會在<code>main.js</code>中宣告全域的interceptor，每次發出呼叫API的request前先將<code>loading...</code>畫面顯示，得到response後將其關閉。但問題來了，我們的<code>autocomplete</code>功能，也是會產生呼叫API的情形，會變成每打一個字會產生<code>loading...</code>效果，這是我們不希望的。</p><p>筆者在上述的問題解決方式採用上面提到的宣告一個新的<code>axios實體</code>方式，並且將該實體的interceptor設定中使用<code>eject</code>方式移除特定interceptor，當然在呼叫API時使用該<code>axios實體</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 宣告於main.js中</span></div><div class="line"><span class="keyword">const</span> myInterceptor = axios.interceptors.request.use(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;<span class="comment">/*...*/</span>&#125;);</div><div class="line">Vue.prototype.$myInterceptor = myInterceptor;</div><div class="line"></div><div class="line"><span class="comment">// 以下為個別的Vue檔案中script區塊</span></div><div class="line"><span class="comment">// import axios</span></div><div class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span>;</div><div class="line"><span class="comment">// 宣告axios實體變數於data區塊中</span></div><div class="line">data()&#123;</div><div class="line">    <span class="keyword">return</span>&#123;</div><div class="line">      myAxios: <span class="literal">null</span>  </div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 宣告axios實體初始化於created事件中</span></div><div class="line">created: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    myAxios = axios.create(&#123;</div><div class="line">        baseURL: <span class="string">'https://some-domain.com/api/'</span>,</div><div class="line">        timeout: <span class="number">1000</span>,</div><div class="line">        headers: &#123;<span class="string">'X-Custom-Header'</span>: <span class="string">'foobar'</span>&#125;</div><div class="line">    &#125;);</div><div class="line">    myAxios.interceptors.request.eject(<span class="keyword">this</span>.$myInterceptor);</div><div class="line">&#125;</div><div class="line"><span class="comment">// 該頁面中呼叫api時使用myAxios這個實體</span></div></pre></td></tr></table></figure></p><h3 id="多個請求Concurrency化"><a href="#多個請求Concurrency化" class="headerlink" title="多個請求Concurrency化"></a>多個請求Concurrency化</h3><p><code>axios</code>有提供多個request平行處理的功能<code>all</code>，然後可以使用<code>spread</code>將多個response當作參數接進來<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">axios.all([</div><div class="line">    axios.get(<span class="string">'/users'</span>),</div><div class="line">    axios.get(<span class="string">'/posts'</span>, <span class="attr">params</span>:&#123;</div><div class="line">        userId: userId</div><div class="line">    &#125;)</div><div class="line">])</div><div class="line">.then(</div><div class="line">    axios.spread(<span class="function">(<span class="params">userResponse, postResponse</span>)=&gt;</span> &#123;</div><div class="line">        <span class="built_in">console</span>.log(userResponse);</div><div class="line">        <span class="built_in">console</span>.log(postResponse);</div><div class="line">    &#125;)</div><div class="line">)</div></pre></td></tr></table></figure></p><h3 id="實例"><a href="#實例" class="headerlink" title="實例"></a>實例</h3><p>我們來做一下實例吧，找一個公開的api <a href="https://jsonplaceholder.typicode.com/" target="_blank" rel="external">jsonplaceholder</a> 串接，並使用<code>interceptor</code>做進一步的處理。</p><h4 id="安裝及設置前置作業"><a href="#安裝及設置前置作業" class="headerlink" title="安裝及設置前置作業"></a>安裝及設置前置作業</h4><p>前置作業很多，但我會以這個專案為模版，其他文章的範例會使用這個專案繼續完成其他套件示範。</p><ol><li><p>使用<code>vue-cli</code>initial webpack模版專案</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vue init webpack DemoApp</div></pre></td></tr></table></figure></li><li><p>安裝<code>bootstrap-vue</code><br>接著使用<code>visual studio code</code>開啟專案，為了版面漂亮，我們來安裝一下<code>bootstrap</code>吧，為了使用現成的bootstrap component，我們就直接安裝<code>bootstrap-vue</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install bootstrap-vue --save</div></pre></td></tr></table></figure><p> 接著我們在<code>main.js</code>中<code>bootstrap-vue</code>的import及使用宣告</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// import及使用</span></div><div class="line"><span class="keyword">import</span> BootstrapVue <span class="keyword">from</span> <span class="string">'bootstrap-vue'</span></div><div class="line">Vue.use(BootstrapVue);</div><div class="line"><span class="comment">// 載入相關css</span></div><div class="line"><span class="keyword">import</span> <span class="string">'bootstrap/dist/css/bootstrap.css'</span></div><div class="line"><span class="keyword">import</span> <span class="string">'bootstrap-vue/dist/bootstrap-vue.css'</span></div></pre></td></tr></table></figure></li><li><p>安裝<code>jquery</code>及<code>popper.js</code><br>因為我們專案使用<code>bootstrap 4</code>版本，需要安裝<code>jquery</code>及<code>popper.js</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">npm install jquery --save</div><div class="line">npm install popper.js --save</div></pre></td></tr></table></figure></li><li><p>安裝<code>font-awesome</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install font-awesome</div></pre></td></tr></table></figure><p> 接著我們在<code>main.js</code>中載入相關css</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> <span class="string">'font-awesome/css/font-awesome.css'</span></div></pre></td></tr></table></figure></li><li><p>安裝我們的主角<code>axios</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install axios</div></pre></td></tr></table></figure><p> 以上面所介紹的，我們在<code>main.js</code>中加入<code>defaults</code>設定值，先加入<code>baseURL</code>吧</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></div><div class="line"></div><div class="line">axios.defaults.baseURL = <span class="string">'https://jsonplaceholder.typicode.com'</span></div></pre></td></tr></table></figure></li></ol><h4 id="撰寫程式"><a href="#撰寫程式" class="headerlink" title="撰寫程式"></a>撰寫程式</h4><p>這個範例會使用<a href="https://jsonplaceholder.typicode.com/posts" target="_blank" rel="external">https://jsonplaceholder.typicode.com/posts</a>做示範，先看一下回傳的object結構<br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"userId"</span>: <span class="number">1</span>,</div><div class="line">    <span class="attr">"id"</span>: <span class="number">1</span>,</div><div class="line">    <span class="attr">"title"</span>: <span class="string">"sunt aut facere repellat provident occaecati excepturi optio reprehenderit"</span>,</div><div class="line">    <span class="attr">"body"</span>: <span class="string">"quia et suscipit\nsuscipit recusandae consequuntur expedita et cum\nreprehenderit molestiae ut ut quas totam\nnostrum rerum est autem sunt rem eveniet architecto"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>我們這篇的範例就示範印出<code>title</code>及<code>body</code>欄位。筆者就增加一點困難，我們就先列出<code>title</code>欄位列表，然後點下<code>title</code>後相對應的<code>body</code>內容才會以<code>collapse</code>效果彈出顯示，使用<code>font-awesome</code>在顯示隱藏效果下，切換顯示 <i class="fa fa-plus-square-o"></i> 及 <i class="fa fa-minus-square-o"></i> 符號。<code>body</code>欄位隱藏的狀態下會顯示 <i class="fa fa-plus-square-o"></i> 表示可以點開內容，若已顯示狀態下則切換顯示為 <i class="fa fa-minus-square-o"></i>，表示已打開內容。需求講完了，我們就來實際動手做吧。</p><h5 id="建立Component-AxiosDemo-vue"><a href="#建立Component-AxiosDemo-vue" class="headerlink" title="建立Component:AxiosDemo.vue"></a>建立Component:AxiosDemo.vue</h5><p>在<code>Explorer</code>視窗中，直接在components上按右鍵加入<code>AxiosDemo.vue</code>，我們先來宣告一下data部份，到時呼叫api後得到的response data使用這個data變數去接<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">data() &#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        postInfos: []</div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>接下來我們就直接在<code>created</code>事件中呼叫API，取得資料，因我們已經於<code>main.js</code>中設置<code>baseURL</code>，geturl只要設置相對路徑即可<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">created: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    axios.get(<span class="string">"/posts"</span>).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</div><div class="line">      <span class="keyword">let</span> tempInfos = response.data;</div><div class="line">      tempInfos.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</div><div class="line">        item.show = <span class="literal">false</span>;</div><div class="line">        <span class="keyword">this</span>.postInfos.push(item);</div><div class="line">      &#125;);</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>以上程式碼稍微要講解一下，我們先用<code>tempInfos</code>接response data，之後再使用<code>foreach</code>倒出資料時，順邊指定<code>show</code>屬性，預設設為<code>false</code>，其控制<code>body</code>欄位資料顯示隱藏邏輯，設定好的資料push至我們的data變數<code>postInfos</code>。</p><p>都設置完邏輯面的部份，我們來處理一下ui面吧，這裡會使用到<code>bootstrap</code>中的<code>card</code>結構，<code>title</code>欄位資料放於<code>card-header</code>中，<code>body</code>資料放於<code>card-body</code>中(預設隱藏)。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"card"</span></span></div><div class="line"><span class="tag">    <span class="attr">v-for</span>=<span class="string">"post in postInfos"</span></span></div><div class="line"><span class="tag">    <span class="attr">:key</span>=<span class="string">"post.id"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"card-header"</span></span></div><div class="line"><span class="tag">        @<span class="attr">click</span>=<span class="string">"post.show = !post.show"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-plus-square-o"</span> <span class="attr">v-show</span>=<span class="string">"!post.show"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-minus-square-o"</span> <span class="attr">v-show</span>=<span class="string">"post.show"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> &#123;&#123;post.title&#125;&#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"card-body"</span></span></div><div class="line"><span class="tag">        <span class="attr">v-show</span>=<span class="string">"post.show"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"card-text"</span>&gt;</span></div><div class="line">        &#123;&#123;post.body&#125;&#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p><p>上述程式碼使用到vue相關技巧如下</p><ul><li><code>vue directive</code>有<code>v-for</code>、<code>v-show</code></li><li>事件監聽<code>v-on</code>如<code>@click</code></li><li><code>javascript表達式</code>寫於<code>@click</code>，將show改為目前show值相反值<ul><li>例:true改為false、false則反之。</li></ul></li><li>一定要會的<code>Mustache語法</code>使用，將<code>title</code>、<code>body</code>欄位值印出</li></ul><p>完整的<code>AxiosDemo.vue</code>程式碼如下<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">&lt;template&gt;</div><div class="line">  &lt;div id=<span class="string">"axiosdemo"</span>&gt;</div><div class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"card"</span></div><div class="line">         v-<span class="keyword">for</span>=<span class="string">"post in postInfos"</span></div><div class="line">         :key=<span class="string">"post.id"</span>&gt;</div><div class="line">      &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"card-header"</span></div><div class="line">           @click=<span class="string">"post.show = !post.show"</span>&gt;</div><div class="line">        &lt;i <span class="class"><span class="keyword">class</span></span>=<span class="string">"fa fa-plus-square-o"</span> v-show=<span class="string">"!post.show"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></div><div class="line">        &lt;i <span class="class"><span class="keyword">class</span></span>=<span class="string">"fa fa-minus-square-o"</span> v-show=<span class="string">"post.show"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span> &#123;&#123;post.title&#125;&#125;</div><div class="line">      &lt;<span class="regexp">/div&gt;</span></div><div class="line"><span class="regexp">      &lt;div class="card-body"</span></div><div class="line"><span class="regexp">           v-show="post.show"&gt;</span></div><div class="line"><span class="regexp">        &lt;p class="card-text"&gt;</span></div><div class="line"><span class="regexp">          &#123;&#123;post.body&#125;&#125;</span></div><div class="line"><span class="regexp">        &lt;/</span>p&gt;</div><div class="line">      &lt;<span class="regexp">/div&gt;</span></div><div class="line"><span class="regexp">    &lt;/</span>div&gt;</div><div class="line">  &lt;<span class="regexp">/div&gt;</span></div><div class="line"><span class="regexp">&lt;/</span>template&gt;</div><div class="line">&lt;script&gt;</div><div class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">"axios"</span>;</div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">  name: <span class="string">"AxiosDemo"</span>,</div><div class="line">  data() &#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">      postInfos: []</div><div class="line">    &#125;;</div><div class="line">  &#125;,</div><div class="line">  created: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    axios.get(<span class="string">"/posts"</span>).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</div><div class="line">      <span class="keyword">let</span> tempInfos = response.data;</div><div class="line">      tempInfos.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</div><div class="line">        item.show = <span class="literal">false</span>;</div><div class="line">        <span class="keyword">this</span>.postInfos.push(item);</div><div class="line">      &#125;);</div><div class="line">    &#125;);</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure></p><h5 id="設定Route"><a href="#設定Route" class="headerlink" title="設定Route"></a>設定Route</h5><p>我們找到<code>router\index.js</code>，擴充<code>routes</code>陣列<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 先import Component</span></div><div class="line"><span class="keyword">import</span> AxiosDemo <span class="keyword">from</span> <span class="string">'@/components/AxiosDemo'</span></div><div class="line"></div><div class="line"><span class="comment">// 擴充routes陣列</span></div><div class="line">&#123;</div><div class="line">    path: <span class="string">'axios'</span>,</div><div class="line">    name: <span class="string">'AxiosDemo'</span>,</div><div class="line">    component: AxiosDemo</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>使用<code>npm run dev</code>執行網站，效果如下<br><img src="/Blog/2018/06/25/Vue套件介紹：axios/Axios_Demo.gif" alt="[Axios_Demo]" title="[Axios_Demo]"></p><h4 id="套用axios攔截器及loading效果"><a href="#套用axios攔截器及loading效果" class="headerlink" title="套用axios攔截器及loading效果"></a>套用axios攔截器及loading效果</h4><p>上面有介紹到<code>interceptor攔截器</code>的功能，筆者就以上述範例繼續以擴充的方式完成</p><ol><li><p>安裝loading效果實現套件<code>vue-blockui</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install vue-blockui --save</div></pre></td></tr></table></figure></li><li><p>接著在<code>main.js</code>中引入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 將套件import進來</span></div><div class="line"><span class="keyword">import</span> BlockUI <span class="keyword">from</span> <span class="string">'vue-blockui'</span></div><div class="line"><span class="comment">// 套用於vue中</span></div><div class="line">Vue.use(BlockUI)</div></pre></td></tr></table></figure></li><li><p><code>AxiosDemo.vue</code>頁面中加入<code>vue-blockui</code>ui區塊</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 使用data變數spinnerStatus來控制顯示與否 --&gt;</span></div><div class="line"><span class="comment">&lt;!-- 使用data變數msg來動態設定顯示字串 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">BlockUI</span> <span class="attr">:message</span>=<span class="string">"msg"</span></span></div><div class="line"><span class="tag">        <span class="attr">v-show</span>=<span class="string">"spinnerStatus"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-cog fa-spin fa-3x fa-fw"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">BlockUI</span>&gt;</span></div></pre></td></tr></table></figure></li><li><p>上步驟宣告中有使用到<code>data</code>變數</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">data() &#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        postInfos: [],</div><div class="line">        msg: <span class="string">"Loading..."</span>,</div><div class="line">        spinnerStatus: <span class="literal">false</span></div><div class="line">    &#125;;</div><div class="line">&#125;,</div></pre></td></tr></table></figure></li><li><p>在<code>created</code>事件中加入相關程式碼</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> $vue = <span class="keyword">this</span>;</div><div class="line">axios.interceptors.request.use(</div><div class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">config</span>) </span>&#123;</div><div class="line">        $vue.spinnerStatus = <span class="literal">true</span>;</div><div class="line">        <span class="keyword">return</span> config;</div><div class="line">    &#125;,</div><div class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</div><div class="line">        $vue.spinnerStatus = <span class="literal">false</span>;</div><div class="line">        <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</div><div class="line">    &#125;</div><div class="line">);</div><div class="line"><span class="comment">// 使用setTimeout是為了demo效果，不然資料撈太快，會沒看到loading效果</span></div><div class="line"><span class="comment">// 因此故意延遲3秒後才隱藏loading視窗</span></div><div class="line">axios.interceptors.response.use(</div><div class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</div><div class="line">        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            $vue.spinnerStatus = <span class="literal">false</span>;</div><div class="line">        &#125;, <span class="number">3000</span>);</div><div class="line">        <span class="keyword">return</span> response;</div><div class="line">    &#125;,</div><div class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</div><div class="line">        $vue.spinnerStatus = <span class="literal">false</span>;</div><div class="line">        <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</div><div class="line">    &#125;</div><div class="line">);</div></pre></td></tr></table></figure></li><li><p>完整的程式碼(加入<code>axios.get</code>及<code>axios.interceptors</code>)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div></pre></td><td class="code"><pre><div class="line">&lt;template&gt;</div><div class="line">  &lt;div id=<span class="string">"axiosdemo"</span>&gt;</div><div class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"card"</span></div><div class="line">         v-<span class="keyword">for</span>=<span class="string">"post in postInfos"</span></div><div class="line">         :key=<span class="string">"post.id"</span>&gt;</div><div class="line">      &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"card-header"</span></div><div class="line">           @click=<span class="string">"post.show = !post.show"</span>&gt;</div><div class="line">        &lt;i <span class="class"><span class="keyword">class</span></span>=<span class="string">"fa fa-plus-square-o"</span></div><div class="line">           v-show=<span class="string">"!post.show"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></div><div class="line">        &lt;i <span class="class"><span class="keyword">class</span></span>=<span class="string">"fa fa-minus-square-o"</span></div><div class="line">           v-show=<span class="string">"post.show"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span> &#123;&#123;post.title&#125;&#125;</div><div class="line">      &lt;<span class="regexp">/div&gt;</span></div><div class="line"><span class="regexp">      &lt;div class="card-body"</span></div><div class="line"><span class="regexp">           v-show="post.show"&gt;</span></div><div class="line"><span class="regexp">        &lt;p class="card-text"&gt;</span></div><div class="line"><span class="regexp">          &#123;&#123;post.body&#125;&#125;</span></div><div class="line"><span class="regexp">        &lt;/</span>p&gt;</div><div class="line">      &lt;<span class="regexp">/div&gt;</span></div><div class="line"><span class="regexp">    &lt;/</span>div&gt;</div><div class="line">    &lt;!-- blockui --&gt;</div><div class="line">    &lt;BlockUI :message=<span class="string">"msg"</span></div><div class="line">             v-show=<span class="string">"spinnerStatus"</span>&gt;</div><div class="line">      &lt;i <span class="class"><span class="keyword">class</span></span>=<span class="string">"fa fa-cog fa-spin fa-3x fa-fw"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></div><div class="line">    &lt;<span class="regexp">/BlockUI&gt;</span></div><div class="line"><span class="regexp">  &lt;/</span>div&gt;</div><div class="line">&lt;<span class="regexp">/template&gt;</span></div><div class="line"><span class="regexp">&lt;script&gt;</span></div><div class="line"><span class="regexp">import axios from "axios";</span></div><div class="line"><span class="regexp">export default &#123;</span></div><div class="line"><span class="regexp">  name: "AxiosDemo",</span></div><div class="line"><span class="regexp">  data() &#123;</span></div><div class="line"><span class="regexp">    return &#123;</span></div><div class="line"><span class="regexp">      postInfos: [],</span></div><div class="line"><span class="regexp">      msg: "Loading...",</span></div><div class="line"><span class="regexp">      spinnerStatus: false</span></div><div class="line"><span class="regexp">    &#125;;</span></div><div class="line"><span class="regexp">  &#125;,</span></div><div class="line"><span class="regexp">  created: function() &#123;</span></div><div class="line"><span class="regexp">    let $vue = this;</span></div><div class="line"><span class="regexp">    axios.interceptors.request.use(</span></div><div class="line"><span class="regexp">      function(config) &#123;</span></div><div class="line"><span class="regexp">        $vue.spinnerStatus = true;</span></div><div class="line"><span class="regexp">        return config;</span></div><div class="line"><span class="regexp">      &#125;,</span></div><div class="line"><span class="regexp">      function(error) &#123;</span></div><div class="line"><span class="regexp">        $vue.spinnerStatus = false;</span></div><div class="line"><span class="regexp">        return Promise.reject(error);</span></div><div class="line"><span class="regexp">      &#125;</span></div><div class="line"><span class="regexp">    );</span></div><div class="line"><span class="regexp"></span></div><div class="line"><span class="regexp">    /</span><span class="regexp">/ Add a response interceptor</span></div><div class="line"><span class="regexp">    axios.interceptors.response.use(</span></div><div class="line"><span class="regexp">      function(response) &#123;</span></div><div class="line"><span class="regexp">        setTimeout(function() &#123;</span></div><div class="line"><span class="regexp">          $vue.spinnerStatus = false;</span></div><div class="line"><span class="regexp">        &#125;, 3000);</span></div><div class="line"><span class="regexp">        return response;</span></div><div class="line"><span class="regexp">      &#125;,</span></div><div class="line"><span class="regexp">      function(error) &#123;</span></div><div class="line"><span class="regexp">        $vue.spinnerStatus = false;</span></div><div class="line"><span class="regexp">        return Promise.reject(error);</span></div><div class="line"><span class="regexp">      &#125;</span></div><div class="line"><span class="regexp">    );</span></div><div class="line"><span class="regexp">    axios.get("/</span>posts<span class="string">").then(response =&gt; &#123;</span></div><div class="line"><span class="string">      let tempInfos = response.data;</span></div><div class="line"><span class="string">      tempInfos.forEach(item =&gt; &#123;</span></div><div class="line"><span class="string">        item.show = false;</span></div><div class="line"><span class="string">        this.postInfos.push(item);</span></div><div class="line"><span class="string">      &#125;);</span></div><div class="line"><span class="string">    &#125;);</span></div><div class="line"><span class="string">  &#125;</span></div><div class="line"><span class="string">&#125;;</span></div><div class="line"><span class="string">&lt;/script&gt;</span></div></pre></td></tr></table></figure></li></ol><p>最終完成效果如下<br><img src="/Blog/2018/06/25/Vue套件介紹：axios/Axios_Interceptor_Demo.gif" alt="[Axios_Interceptor_Demo]" title="[Axios_Interceptor_Demo]"></p><h2 id="結論-1"><a href="#結論-1" class="headerlink" title="結論"></a>結論</h2><hr><p>我們建構應用程式最基本的功能就是CRUD，<code>axios</code>套件是一定要投資的，筆者建議一定要花時間研究及練習，老話一句，一定要記得<code>axios</code>提供哪些功能，這樣需要用到時，很快就能查出相對應的解法，介紹就到這邊，我們下篇再見。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前提情要&quot;&gt;&lt;a href=&quot;#前提情要&quot; class=&quot;headerlink&quot; title=&quot;前提情要&quot;&gt;&lt;/a&gt;前提情要&lt;/h2&gt;&lt;hr&gt;
    
    </summary>
    
      <category term="vue" scheme="http://eugenesu0515.github.io/categories/vue/"/>
    
    
      <category term="vue" scheme="http://eugenesu0515.github.io/tags/vue/"/>
    
      <category term="axios" scheme="http://eugenesu0515.github.io/tags/axios/"/>
    
  </entry>
  
  <entry>
    <title>Vue系列文章五：Vue Instance與Component</title>
    <link href="http://eugenesu0515.github.io/2018/06/25/Vue%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0%E4%BA%94%EF%BC%9AVue-Instance%E8%88%87Component/"/>
    <id>http://eugenesu0515.github.io/2018/06/25/Vue系列文章五：Vue-Instance與Component/</id>
    <published>2018-06-25T08:55:30.000Z</published>
    <updated>2018-07-11T18:43:18.041Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前提情要"><a href="#前提情要" class="headerlink" title="前提情要"></a>前提情要</h2><hr><p>前面兩篇講了vue相關的語法，是不是覺得少了點什麼，這篇是重頭戲，介紹Vue Instance宣告時有哪些options可設定，有什麼樣的相關技巧以及Component的應用，筆者就以自身開發角度分享實戰經驗。<br><a id="more"></a></p><h2 id="內容"><a href="#內容" class="headerlink" title="內容"></a>內容</h2><hr><!-- toc --><h3 id="Vue-Instance"><a href="#Vue-Instance" class="headerlink" title="Vue Instance"></a>Vue Instance</h3><h4 id="建立實體"><a href="#建立實體" class="headerlink" title="建立實體"></a>建立實體</h4><p>使用<code>new</code>關鍵字建立vue實體<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</div><div class="line">  <span class="comment">// options</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure></p><h4 id="相關屬性介紹"><a href="#相關屬性介紹" class="headerlink" title="相關屬性介紹"></a>相關屬性介紹</h4><h5 id="el"><a href="#el" class="headerlink" title="el"></a>el</h5><p>最重要且一定要設定的option，vue的作用域，與<code>jquery selector</code>類似方式宣告<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 表示vue作用域為id=app之div區塊</span></div><div class="line"><span class="keyword">new</span> Vue(&#123;</div><div class="line">  el: <span class="string">'#app'</span>,</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p><h5 id="data"><a href="#data" class="headerlink" title="data"></a>data</h5><p>vue中使用到的參數，皆宣告於此<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> Vue(&#123;</div><div class="line">  el: <span class="string">'#app'</span>,</div><div class="line">  data()&#123;</div><div class="line">      <span class="keyword">return</span> &#123;</div><div class="line">          msg: <span class="string">'Hello Vue!!'</span></div><div class="line">      &#125;</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p><h5 id="methods"><a href="#methods" class="headerlink" title="methods"></a>methods</h5><p>vue宣告之使用到的function，皆宣告於此<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> Vue(&#123;</div><div class="line">  el: <span class="string">'#app'</span>,</div><div class="line">  data()&#123;</div><div class="line">      <span class="keyword">return</span> &#123;</div><div class="line">          msg: <span class="string">'Hello Vue!!'</span></div><div class="line">      &#125;</div><div class="line">  &#125;,</div><div class="line">  methods: &#123;</div><div class="line">      someMethod: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">          <span class="built_in">console</span>.log(<span class="string">'Hello Vue!!'</span>);</div><div class="line">      &#125;</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p><h5 id="Lifecycle-Hook"><a href="#Lifecycle-Hook" class="headerlink" title="Lifecycle Hook"></a>Lifecycle Hook</h5><p>vue在實體化過程中開放hook讓我們監聽，看<a href="https://vuejs.org/v2/guide/instance.html#Instance-Lifecycle-Hooks" target="_blank" rel="external">官網圖</a>比較順<br><img src="/Blog/2018/06/25/Vue系列文章五：Vue-Instance與Component/Vue_Lifecycle.jpg" alt="[Vue_Lifecycle]" title="[Vue_Lifecycle]"><br>以上以筆者經驗來說，最常使用的是<code>created</code>、<code>mounted</code>、<code>beforeDestroy</code>這三個事件，使用時機為</p><ol><li><code>created</code>：會Initial頁面上的資料來源，如下拉式選單source</li><li><code>mounted</code>：監聽事件宣告，或者確保vue實體化完才可以做的事情；若分不清楚，在此宣告是最安全的</li><li><code>beforeDestroy</code>：若頁面上有監聽事件則，需於此事件中解除監聽<code>off</code></li></ol><h5 id="computed"><a href="#computed" class="headerlink" title="computed"></a>computed</h5><p>若頁面上使用變數為經過運算後才得到值，可以使用<code>computed</code>option中宣告它，在vue中使用時與<code>data</code>參數無差別，差別在於若運算邏輯中有參考到別的參數則，該參數有變化則會重新運算<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> Vue(&#123;</div><div class="line">  el: <span class="string">'#app'</span>,</div><div class="line">  data()&#123;</div><div class="line">      <span class="keyword">return</span> &#123;</div><div class="line">          msg: <span class="string">'Hello Vue!!'</span></div><div class="line">      &#125;</div><div class="line">  &#125;,</div><div class="line">  methods: &#123;</div><div class="line">      someMethod: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">          <span class="built_in">console</span>.log(<span class="string">'Hello Vue!!'</span>);</div><div class="line">      &#125;</div><div class="line">  &#125;,</div><div class="line">  computed: &#123;</div><div class="line">      msgLength: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">          <span class="keyword">return</span> <span class="keyword">this</span>.msg.length;</div><div class="line">      &#125;</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p><p>官網中提到假設<code>computed</code>變數中無參考到其他參數，而是一般function執行，例<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">computed: &#123;</div><div class="line">  now: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">Date</span>.now()</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>則比較適合使用<code>methods</code>方式來宣告，才會頁面rerender時會再重新呼叫一次function</p><h5 id="watch"><a href="#watch" class="headerlink" title="watch"></a>watch</h5><p>監聽參數變化，vue預設會提供新舊值讓我們操作<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">watch: &#123;</div><div class="line">    <span class="comment">// 監聽question這個參數</span></div><div class="line">    question: <span class="function"><span class="keyword">function</span> (<span class="params">newQuestion, oldQuestion</span>) </span>&#123;</div><div class="line">        <span class="comment">//邏輯處理</span></div><div class="line">        <span class="comment">//newQuestion：新設定值</span></div><div class="line">        <span class="comment">//oldQuestion：最後一次設定值</span></div><div class="line">    &#125;</div><div class="line">&#125;,</div></pre></td></tr></table></figure></p><div class="alert info"><p>methods/computed/watch這三個option一定要慎選使用，多思考一秒會讓你事半功倍，不留下臭蟲</p></div><h5 id="mixin"><a href="#mixin" class="headerlink" title="mixin"></a>mixin</h5><p><code>mixin</code>看官網解釋重點就是<code>mixed</code>這個字，表是我們可以定義一個<code>component</code>，有完整的vue實體化options可以設定，並使用<code>mixins</code>option使用我們剛定義好的component。以筆者親身經驗來說，若有共用function的需求，我會定一個<code>mixin</code>用component，裡頭會使用<code>methods</code>宣告共用function。最後，任一個component中使用<code>mixins</code>option宣告並使用共用function。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 定義完整的Component當作MyMixin</span></div><div class="line">&lt;template&gt;</div><div class="line">  &lt;div id=<span class="string">"mymixin"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></div><div class="line">&lt;<span class="regexp">/template&gt;</span></div><div class="line"><span class="regexp">&lt;script&gt;</span></div><div class="line"><span class="regexp">export default &#123;</span></div><div class="line"><span class="regexp">  name: "MyMixin",</span></div><div class="line"><span class="regexp">  methods: &#123;</span></div><div class="line"><span class="regexp">    /</span><span class="regexp">/ 這邊定義了一個共用function</span></div><div class="line"><span class="regexp">    hello() &#123;</span></div><div class="line"><span class="regexp">      console.log("Hello vue from mixin!");</span></div><div class="line"><span class="regexp">    &#125;</span></div><div class="line"><span class="regexp">  &#125;</span></div><div class="line"><span class="regexp">&#125;;</span></div><div class="line"><span class="regexp">&lt;/</span>script&gt;</div></pre></td></tr></table></figure></p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 示範使用上述宣告之MyMixin</span></div><div class="line">&lt;template&gt;</div><div class="line">  &lt;div id=<span class="string">"mixindemo"</span>&gt;</div><div class="line"></div><div class="line">  &lt;<span class="regexp">/div&gt;</span></div><div class="line"><span class="regexp">&lt;/</span>template&gt;</div><div class="line">&lt;script&gt;</div><div class="line"><span class="keyword">import</span> MyMixin <span class="keyword">from</span> <span class="string">"@/components/MyMixin.vue"</span>;</div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">  name: <span class="string">"MixinDemo"</span>,</div><div class="line">  mixins: [MyMixin],</div><div class="line">  created: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.hello();</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure><p>執行後的結果<br><img src="/Blog/2018/06/25/Vue系列文章五：Vue-Instance與Component/Vue_Mixin.jpg" alt="[Vue_Mixin]" title="[Vue_Mixin]"></p><h3 id="Component介紹"><a href="#Component介紹" class="headerlink" title="Component介紹"></a>Component介紹</h3><p>基本上，若使用<code>webpack full</code>template產生之專案則，每一個<code>.vue</code>檔案都是一個獨立的component，vue instance裡可設定的所有options(除el)皆可設定。</p><h4 id="使用技巧"><a href="#使用技巧" class="headerlink" title="使用技巧"></a>使用技巧</h4><p>筆者習慣上，依功能區分component，以利達到Component最小化，例如Layout中會抽Navigation、Sidebar、Footer等；若查詢頁面中則會抽Conditions、Pagination等Component。</p><h4 id="傳遞資料"><a href="#傳遞資料" class="headerlink" title="傳遞資料"></a>傳遞資料</h4><p>以上述情形，會遇到Component間傳遞資料的需求，假設以查詢頁面為例，符合統一頁面設計規則，每個查詢頁面中會放置「新增」按鈕，這種統一需求會一併抽至<code>conditions</code>component，等於每個功能的「新增」url設定需傳至<code>conditions</code>component中。傳遞資料會分為兩種情況，若將<code>import</code>方式引入component則，引入進來的component稱為child component，本身component則稱為parent component，因此會分為<code>父傳子</code>及<code>子傳父</code>的傳遞方式。筆者針對這個傳遞資料的示範會使用兩個component完成：<code>conditions</code>及<code>componentdemo</code>。</p><h5 id="父傳子"><a href="#父傳子" class="headerlink" title="父傳子"></a>父傳子</h5><p>父傳子的方式簡單多了，在<code>child component</code>中使用<code>props</code>option設定參數的宣告，<code>parent component</code>中透過<code>v-on</code>的方式指定該參數的值即可。</p><ul><li>Child Component<code>Conditions.vue</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line">&lt;template&gt;</div><div class="line">  &lt;div id=<span class="string">"conditions"</span>&gt;</div><div class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"card"</span>&gt;</div><div class="line">      &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"card-header"</span>&gt;</div><div class="line">        &lt;!-- 外部連結 --&gt;</div><div class="line">        &lt;a :href=<span class="string">"insertUrl"</span></div><div class="line">           <span class="class"><span class="keyword">class</span></span>=<span class="string">"btn btn-secondary"</span></div><div class="line">           target=<span class="string">"_blank"</span>&gt;</div><div class="line">          &lt;i <span class="class"><span class="keyword">class</span></span>=<span class="string">"fa fa-plus"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span> 新增</div><div class="line">        &lt;<span class="regexp">/a&gt;</span></div><div class="line"><span class="regexp">        &lt;!-- 內部vue router path --&gt;</span></div><div class="line"><span class="regexp">        &lt;!-- &lt;router-link :to="&#123; path: insertUrl &#125;"&gt;</span></div><div class="line"><span class="regexp">        &lt;i class="fa fa-plus"&gt;&lt;/i</span>&gt; 新增</div><div class="line">      &lt;<span class="regexp">/router-link&gt; --&gt;</span></div><div class="line"><span class="regexp">      &lt;/</span>div&gt;</div><div class="line">      &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"card-body"</span>&gt;</div><div class="line">        &lt;form <span class="class"><span class="keyword">class</span></span>=<span class="string">"form form-horizontal"</span>&gt;</div><div class="line">          &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"row"</span>&gt;</div><div class="line">            &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"col-4 form-group"</span>&gt;</div><div class="line">              &lt;label&gt;查詢條件一&lt;<span class="regexp">/label&gt;</span></div><div class="line"><span class="regexp">              &lt;input type="text"</span></div><div class="line"><span class="regexp">                     class="form-control"&gt;</span></div><div class="line"><span class="regexp">            &lt;/</span>div&gt;</div><div class="line">            &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"form-group col-4"</span>&gt;</div><div class="line">              &lt;label&gt;查詢條件二&lt;<span class="regexp">/label&gt;</span></div><div class="line"><span class="regexp">              &lt;select class="form-control"&gt;</span></div><div class="line"><span class="regexp">                &lt;option value=""&gt;&lt;/</span>option&gt;</div><div class="line">              &lt;<span class="regexp">/select&gt;</span></div><div class="line"><span class="regexp">            &lt;/</span>div&gt;</div><div class="line">          &lt;<span class="regexp">/div&gt;</span></div><div class="line"><span class="regexp">          &lt;div class="row"&gt;</span></div><div class="line"><span class="regexp">            &lt;div class="col"&gt;</span></div><div class="line"><span class="regexp">              &lt;button class="btn btn-danger"&gt;</span></div><div class="line"><span class="regexp">                &lt;i class="fa fa-times"&gt;&lt;/i</span>&gt; 取消</div><div class="line">              &lt;<span class="regexp">/button&gt;</span></div><div class="line"><span class="regexp">              &lt;button class="btn btn-primary"&gt;</span></div><div class="line"><span class="regexp">                &lt;i class="fa fa-search"&gt;&lt;/i</span>&gt; 查詢</div><div class="line">              &lt;<span class="regexp">/button&gt;</span></div><div class="line"><span class="regexp">            &lt;/</span>div&gt;</div><div class="line">          &lt;<span class="regexp">/div&gt;</span></div><div class="line"><span class="regexp">        &lt;/</span>form&gt;</div><div class="line">      &lt;<span class="regexp">/div&gt;</span></div><div class="line"><span class="regexp">    &lt;/</span>div&gt;</div><div class="line">  &lt;<span class="regexp">/div&gt;</span></div><div class="line"><span class="regexp">&lt;/</span>template&gt;</div><div class="line">&lt;script&gt;</div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">  name: <span class="string">"Conditions"</span>,</div><div class="line">  <span class="comment">// 使用props宣告可以使父component傳的參數</span></div><div class="line">  props: [<span class="string">"insertUrl"</span>]</div><div class="line">&#125;;</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure><ul><li>Parent Component<code>ComponentDemo.vue</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&lt;template&gt;</div><div class="line">  &lt;div id=<span class="string">"componentdemo"</span>&gt;</div><div class="line">    &lt;conditions :insertUrl=<span class="string">"insertUrl"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">conditions</span>&gt;</span></span></div><div class="line">  &lt;<span class="regexp">/div&gt;</span></div><div class="line"><span class="regexp">&lt;/</span>template&gt;</div><div class="line">&lt;script&gt;</div><div class="line"><span class="keyword">import</span> Conditions <span class="keyword">from</span> <span class="string">'@/components/Conditions.vue'</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">  name: <span class="string">'ComponentDemo'</span>,</div><div class="line">  components: &#123;</div><div class="line">    Conditions</div><div class="line">  &#125;,</div><div class="line">  data()&#123;</div><div class="line">    <span class="keyword">return</span>&#123;</div><div class="line">      insertUrl: <span class="string">'http://google.com.tw'</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure><h5 id="子傳父"><a href="#子傳父" class="headerlink" title="子傳父"></a>子傳父</h5><p>以上述例子，跟著筆者繼續完成子傳父的功能吧，假設<code>查詢</code>按鈕按下去後將查詢條件區塊中使用者所填選的值傳送至父component中做查詢動作，我們需要使用<code>$emit</code>的方式通知。</p><ul><li><p>Child Component<code>Conditions.vue</code></p><ul><li>宣告data參數值:conditions</li><li>將conditions參數透過<code>v-model</code>bind至查詢條件區塊中</li><li><code>查詢</code>鈕中加入click事件，使用<code>v-on:click</code>，function名稱為<code>searchProcess</code></li><li><code>searchProcess</code>function中<code>emit</code>事件，事件名稱為<code>searchEmit</code><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line">&lt;template&gt;</div><div class="line">  &lt;div id=<span class="string">"conditions"</span>&gt;</div><div class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"card"</span>&gt;</div><div class="line">      &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"card-header"</span>&gt;</div><div class="line">        &lt;!-- 外部連結 --&gt;</div><div class="line">        &lt;a :href=<span class="string">"insertUrl"</span></div><div class="line">           <span class="class"><span class="keyword">class</span></span>=<span class="string">"btn btn-secondary"</span></div><div class="line">           target=<span class="string">"_blank"</span>&gt;</div><div class="line">          &lt;i <span class="class"><span class="keyword">class</span></span>=<span class="string">"fa fa-plus"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span> 新增</div><div class="line">        &lt;<span class="regexp">/a&gt;</span></div><div class="line"><span class="regexp">        &lt;!-- 內部vue router path --&gt;</span></div><div class="line"><span class="regexp">        &lt;!-- &lt;router-link :to="&#123; path: insertUrl &#125;"&gt;</span></div><div class="line"><span class="regexp">        &lt;i class="fa fa-plus"&gt;&lt;/i</span>&gt; 新增</div><div class="line">      &lt;<span class="regexp">/router-link&gt; --&gt;</span></div><div class="line"><span class="regexp">      &lt;/</span>div&gt;</div><div class="line">      &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"card-body"</span>&gt;</div><div class="line">        &lt;form <span class="class"><span class="keyword">class</span></span>=<span class="string">"form form-horizontal"</span>&gt;</div><div class="line">          &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"row"</span>&gt;</div><div class="line">            &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"col-4 form-group"</span>&gt;</div><div class="line">              &lt;label&gt;查詢條件一&lt;<span class="regexp">/label&gt;</span></div><div class="line"><span class="regexp">              &lt;input type="text"</span></div><div class="line"><span class="regexp">                     class="form-control"</span></div><div class="line"><span class="regexp">                     v-model="conditions.query1"&gt;</span></div><div class="line"><span class="regexp">            &lt;/</span>div&gt;</div><div class="line">            &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"form-group col-4"</span>&gt;</div><div class="line">              &lt;label&gt;查詢條件二&lt;<span class="regexp">/label&gt;</span></div><div class="line"><span class="regexp">              &lt;select class="form-control"</span></div><div class="line"><span class="regexp">                      v-model="conditions.query2"&gt;</span></div><div class="line"><span class="regexp">                &lt;option value=""&gt;&lt;/</span>option&gt;</div><div class="line">                &lt;option value=<span class="string">"1"</span>&gt;下拉選單一&lt;<span class="regexp">/option&gt;</span></div><div class="line"><span class="regexp">                &lt;option value="2"&gt;下拉選單二&lt;/</span>option&gt;</div><div class="line">              &lt;<span class="regexp">/select&gt;</span></div><div class="line"><span class="regexp">            &lt;/</span>div&gt;</div><div class="line">          &lt;<span class="regexp">/div&gt;</span></div><div class="line"><span class="regexp">          &lt;div class="row"&gt;</span></div><div class="line"><span class="regexp">            &lt;div class="col"&gt;</span></div><div class="line"><span class="regexp">              &lt;button class="btn btn-danger"&gt;</span></div><div class="line"><span class="regexp">                &lt;i class="fa fa-times"&gt;&lt;/i</span>&gt; 取消</div><div class="line">              &lt;<span class="regexp">/button&gt;</span></div><div class="line"><span class="regexp">              &lt;button class="btn btn-primary"</span></div><div class="line"><span class="regexp">                      @click.prevent="searchProcess()"&gt;</span></div><div class="line"><span class="regexp">                &lt;i class="fa fa-search"&gt;&lt;/i</span>&gt; 查詢</div><div class="line">              &lt;<span class="regexp">/button&gt;</span></div><div class="line"><span class="regexp">            &lt;/</span>div&gt;</div><div class="line">          &lt;<span class="regexp">/div&gt;</span></div><div class="line"><span class="regexp">        &lt;/</span>form&gt;</div><div class="line">      &lt;<span class="regexp">/div&gt;</span></div><div class="line"><span class="regexp">    &lt;/</span>div&gt;</div><div class="line">  &lt;<span class="regexp">/div&gt;</span></div><div class="line"><span class="regexp">&lt;/</span>template&gt;</div><div class="line">&lt;script&gt;</div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">  name: <span class="string">"Conditions"</span>,</div><div class="line">  <span class="comment">// 使用props宣告可以使父component傳的參數</span></div><div class="line">  props: [<span class="string">"insertUrl"</span>],</div><div class="line">  data() &#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">      conditions: &#123;&#125;</div><div class="line">    &#125;;</div><div class="line">  &#125;,</div><div class="line">  methods: &#123;</div><div class="line">    searchProcess: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="keyword">this</span>.$emit(<span class="string">"searchEmit"</span>, <span class="keyword">this</span>.conditions);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure></li></ul></li><li><p>Parent Component<code>ComponentDemo.vue</code></p><ul><li>接收子component的<code>emit</code>事件:<code>searchEmit</code>，使用<code>v-on</code>的方式</li><li>並觸發事件時指定執行該component中的methods<code>searchProcess</code><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">&lt;template&gt;</div><div class="line">  &lt;div id=<span class="string">"componentdemo"</span>&gt;</div><div class="line">    &lt;conditions :insertUrl=<span class="string">"insertUrl"</span></div><div class="line">                @searchEmit=<span class="string">"searchProcess"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">conditions</span>&gt;</span></span></div><div class="line">  &lt;<span class="regexp">/div&gt;</span></div><div class="line"><span class="regexp">&lt;/</span>template&gt;</div><div class="line">&lt;script&gt;</div><div class="line"><span class="keyword">import</span> Conditions <span class="keyword">from</span> <span class="string">"@/components/Conditions.vue"</span>;</div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">  name: <span class="string">"ComponentDemo"</span>,</div><div class="line">  components: &#123;</div><div class="line">    Conditions</div><div class="line">  &#125;,</div><div class="line">  data() &#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">      insertUrl: <span class="string">"http://google.com.tw"</span></div><div class="line">    &#125;;</div><div class="line">  &#125;,</div><div class="line">  methods: &#123;</div><div class="line">    searchProcess: <span class="function"><span class="keyword">function</span>(<span class="params">conditions</span>) </span>&#123;</div><div class="line">      <span class="built_in">console</span>.log(conditions);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure></li></ul></li></ul><p>執行後的結果<br><img src="/Blog/2018/06/25/Vue系列文章五：Vue-Instance與Component/Vue_Component_Child_To_Parent.jpg" alt="[Vue_Component_Child_To_Parent]" title="[Vue_Component_Child_To_Parent]"><br>可以使用chrome偵錯視窗中的<code>vue</code>tab可以看出<code>$emit</code>的歷程，也可以看出<code>$emit</code>中發送的payload<br><img src="/Blog/2018/06/25/Vue系列文章五：Vue-Instance與Component/Vue_Component_Child_To_Parent_VueTab.jpg" alt="[Vue_Component_Child_To_Parent_VueTab]" title="[Vue_Component_Child_To_Parent_VueTab]"></p><h4 id="動態載入"><a href="#動態載入" class="headerlink" title="動態載入"></a>動態載入</h4><p>vue有提供動態載入<code>component</code>的機制，若有需求是依照某些條件載入不同的component就可以使用動態載入機制。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 動態指定currentComponent的值:component名稱</span></div><div class="line">&lt;component v-bind:is=<span class="string">"currentComponent"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span></div></pre></td></tr></table></figure></p><p>以筆者經驗是除非有必要性，不然絕不要輕易嘗試，筆者在專案中使用的情境是，因切<code>Layout</code>時，<code>功能區塊</code>必須與<code>頁面標題顯示</code>同個div中，頁面標題使用<code>vue-router</code>中的自定義<code>meta</code>屬性來宣告，因此放在layout中統一處理。</p><p><code>功能區塊</code>可以想成是<code>取消</code> <code>儲存</code> <code>列印</code> <code>匯出報表</code>等該頁面所屬功能，最後設計是每個頁面會搭配一個結尾為<code>Feature</code>的頁面，會去判斷<code>route</code>的值，然後指定該頁面所屬的功能列component，缺點就是Layout檔案中會有一堆component的import及宣告<code>components</code>option，不過官網上的建議<a href="https://vuejs.org/v2/guide/components-registration.html#Automatic-Global-Registration-of-Base-Components" target="_blank" rel="external">Automatic Global Registration of Base Components</a>，實際範例：<a href="https://github.com/chrisvfritz/vue-enterprise-boilerplate/blob/master/src/components/_globals.js" target="_blank" rel="external">vue-enterprise-boilerplate</a>或許有解，筆者目前尚未實際使用過，有機會使用後再補上心得，目前是對於動態載入component有點卻步。</p><h2 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h2><hr><p>藉由這幾篇的觀念解說及經驗分享，筆者相信可以處理大部份的功能，經由這篇的Component介紹，就可以很有系統地去規劃頁面並重用，但傳遞資料需求上面，有父子關係才有辦法做到，但往往有系統的設計會需要無任何關係的<code>component</code>間溝通，需要使用到<code>eventbus</code>的技巧或<code>vuex</code>的store機制，筆者會在套件介紹會寫一篇<code>vuex</code>的實作，再加上會透過<code>vue技巧</code>文章的方式會提出實際碰到問題時的解決方案，希望這系列文章幫助到大家。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前提情要&quot;&gt;&lt;a href=&quot;#前提情要&quot; class=&quot;headerlink&quot; title=&quot;前提情要&quot;&gt;&lt;/a&gt;前提情要&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;前面兩篇講了vue相關的語法，是不是覺得少了點什麼，這篇是重頭戲，介紹Vue Instance宣告時有哪些options可設定，有什麼樣的相關技巧以及Component的應用，筆者就以自身開發角度分享實戰經驗。&lt;br&gt;
    
    </summary>
    
      <category term="vue" scheme="http://eugenesu0515.github.io/categories/vue/"/>
    
    
      <category term="vue" scheme="http://eugenesu0515.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue系列文章四：Vue Directive</title>
    <link href="http://eugenesu0515.github.io/2018/06/22/Vue%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0%E5%9B%9B%EF%BC%9AVue%20Directive/"/>
    <id>http://eugenesu0515.github.io/2018/06/22/Vue系列文章四：Vue Directive/</id>
    <published>2018-06-22T05:44:15.000Z</published>
    <updated>2018-06-24T15:48:28.707Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前提情要"><a href="#前提情要" class="headerlink" title="前提情要"></a>前提情要</h2><hr><p>前一篇已介紹了Vue基本語法，筆者相信應該是有辦法撰寫簡單的邏輯，接下來這一篇介紹<code>v開頭directive</code>相關技巧及知識，筆者使用工具及環境參考上一篇「Vue基本語法」。<br><a id="more"></a></p><h2 id="內容"><a href="#內容" class="headerlink" title="內容"></a>內容</h2><hr><!-- toc --><h3 id="v開頭directive"><a href="#v開頭directive" class="headerlink" title="v開頭directive"></a>v開頭directive</h3><h4 id="v-html"><a href="#v-html" class="headerlink" title="v-html"></a>v-html</h4><p>若我們的資料是包含html tag，且是要當作html語法輸出時如何做呢？會用到<code>v-html</code>這個directive。</p><blockquote><p>Html部份</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;p&gt;Using mustaches: &#123;&#123; rawHtml &#125;&#125;&lt;/p&gt;</div><div class="line">&lt;p&gt;Using v-html directive: &lt;span v-html=&quot;rawHtml&quot;&gt;&lt;/span&gt;&lt;/p&gt;</div></pre></td></tr></table></figure><blockquote><p>效果如下</p></blockquote><p>Using mustaches: &lt;span style=”color: red”&gt;This should be red.&lt;/span&gt;</p> <p>Using v-html directive: <span><span style="color: red">This should be red.</span></span></p><p>以上，有套用<code>v-html</code>屬性才會當作html語法輸出。</p><h4 id="v-if"><a href="#v-if" class="headerlink" title="v-if"></a>v-if</h4><p>若我們有一些顯示區域是需要透過資料綁定及動態設定出現與否，則需透過<code>v-if</code>這個directive，可搭配使用 <code>v-else</code> <code>v-else-if</code>，可以在vue編譯時期就會去除符合條件之區塊。</p><blockquote><p>Html部份</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-if</span>=<span class="string">"ok"</span>&gt;</span>Yes<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-else</span>&gt;</span>No<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div></pre></td></tr></table></figure><p>以上，使用<code>ok</code>這個參數來控制h1區塊顯示與否</p><h4 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a>v-show</h4><p>與<code>v-if</code>一樣，<code>v-show</code>亦是控制顯示區域出現與否，只是在於<code>v-show</code>是使用<code>html的style屬性display</code>控制顯示或隱藏。</p><div class="alert danger no-icon"><p><code>v-if</code> Vs <code>v-show</code><br>若template一次性的顯示與否可以透過<code>v-if</code><br>若是頻繁變動顯示隱藏邏輯則透過<code>v-show</code>控制會使效能更好</p></div><p>以上，筆者稍微要再解釋一下，<code>頻繁變動顯示隱藏邏輯</code>這個狀況，可以想像一下，若套用<code>v-if</code>來控制的話，表示vue會在判斷到需隱藏時實際將dom元素移除，需顯示時將dom元素重新插入。dom操作效能問題參考 <a href="https://hk.saowen.com/a/c4539ce5769cb5e719437a12ec5d1021c3d3a768db92746794b41225de9c2497" target="_blank" rel="external">dom操作與優化探討</a>，因此最好不要因自己寫的邏輯觸發頻繁操作dom而造成效能瓶頸。</p><h4 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h4><p>這個directive就是大家會經常用到的，頁面上經常會將撈到的資料利用<code>table</code>或<code>ul&gt;li</code>來呈現出來，最簡單的例子就是menu的顯示，查詢結果呈現。</p><blockquote><p>Html部份</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"example-1"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"item in items"</span>&gt;</span></div><div class="line">        &#123;&#123; item.message &#125;&#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure><blockquote><p>Javascript部份</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> example1 = <span class="keyword">new</span> Vue(&#123;</div><div class="line">  el: <span class="string">'#example-1'</span>,</div><div class="line">  data: &#123;</div><div class="line">    items: [</div><div class="line">      &#123; <span class="attr">message</span>: <span class="string">'Foo'</span> &#125;,</div><div class="line">      &#123; <span class="attr">message</span>: <span class="string">'Bar'</span> &#125;</div><div class="line">    ]</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure><blockquote><p>效果如下</p></blockquote><ul><br>    <li>Foo</li><br>    <li>bar</li><br></ul> <h5 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h5><p><code>v-for</code>支援陣列及物件，詳細資訊如下</p><ul><li>v-for陣列部份</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">"item in items"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 可倒出陣列順序編號 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">"(item, index) in items"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><ul><li>v-for物件部份</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 將各屬性值依序印出 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">"value in obj"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- key為屬性名稱 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">"(value, key) in obj"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- index為屬性順序編號 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">"(value, key, index) in obj"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><div class="alert info"><p><code>v-for</code>中盡可能設定<code>key</code>屬性</p></div><p><code>v-for</code>中很重要的觀念是，vue有提供key屬性可以設定各item的識別欄位，使vue追縱更快速 <a href="https://vuejs.org/v2/guide/list.html#key" target="_blank" rel="external">參考</a>，因此筆者建議若每筆資料包含識別欄位則使用<code>v-bind</code>設定<code>key</code>屬性上去。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">"item in items"</span> <span class="attr">:key</span>=<span class="string">"item.id"</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!-- content --&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p><h5 id="變更偵測原理"><a href="#變更偵測原理" class="headerlink" title="變更偵測原理"></a>變更偵測原理</h5><div class="alert info"><p>陣列相關的操作/物件屬性值變更皆會使Vue重繪</p></div><p>官網上面還有提到陣列或物件變更偵測的機制，基本上變更偵測邏輯很容易理解</p><ul><li><p>陣列變更偵測邏輯</p><ul><li>陣列相關的操作<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">push()</div><div class="line">pop()</div><div class="line">shift()</div><div class="line">unshift()</div><div class="line">splice()</div><div class="line">sort()</div><div class="line">reverse()</div></pre></td></tr></table></figure></li></ul></li><li><p>物件變更偵測邏輯</p><ul><li>物件屬性值變更</li></ul></li></ul><h5 id="變更偵測注意事項"><a href="#變更偵測注意事項" class="headerlink" title="變更偵測注意事項"></a>變更偵測注意事項</h5><div class="alert danger"><p>變更偵測注意事項請參考以下說明</p></div><ul><li><p>陣列變更偵測注意事項<br>陣列相關變更偵測因<code>javascript</code>限制，除非是陣列的操作，若使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 針對某一筆資料的指定新的值</span></div><div class="line">vm.items[indexOfItem] = newValue</div><div class="line"><span class="comment">// 重新指定陣列長度</span></div><div class="line">vm.items.length = newLength</div></pre></td></tr></table></figure><ul><li><p>解決方式<br>針對以上的第一個問題，vue也提供變相的解法，需透過<code>vm.set</code>來通知變更</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Vue.set</span></div><div class="line">Vue.set(vm.items, indexOfItem, newValue)</div></pre></td></tr></table></figure><p>或者使用<code>javascript</code>中<code>Array</code>技巧 <a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/splice" target="_blank" rel="external">參考</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 將某一個位置的值使用newValue代替</span></div><div class="line">vm.items.splice(itemIndex, <span class="number">1</span>, newValue)</div></pre></td></tr></table></figure><p>針對第二個問題可使用<code>Array</code>技巧<code>Splice</code>來解</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vm.items.splice(newLength)</div></pre></td></tr></table></figure></li></ul></li><li><p>物件變更偵測注意事項<br>基本上跟陣列雷同，物件動態新增屬性會使Vue無法偵測變更</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</div><div class="line">  data: &#123;</div><div class="line">    a: <span class="number">1</span></div><div class="line">  &#125;</div><div class="line">&#125;)</div><div class="line"><span class="comment">// `vm.a` 設定newValue可以被偵測變更</span></div><div class="line"></div><div class="line">vm.b = <span class="number">2</span></div><div class="line"><span class="comment">// `vm.b` 設定newValue則無法被偵測變更</span></div></pre></td></tr></table></figure><p>  與陣列一樣的解法，需透過<code>vm.set</code>的方式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Vue.set(vm.userProfile, <span class="string">'age'</span>, <span class="number">27</span>)</div></pre></td></tr></table></figure></li></ul><h5 id="可搭配使用說明"><a href="#可搭配使用說明" class="headerlink" title="可搭配使用說明"></a>可搭配使用說明</h5><h6 id="Range"><a href="#Range" class="headerlink" title="Range"></a>Range</h6><p>我可以直接指定一個數字當作數值範圍結束值，透過<code>v-for</code>產生指定範圍內的數值<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;div&gt;</div><div class="line">  &lt;span v-<span class="keyword">for</span>=<span class="string">"n in 10"</span>&gt;&#123;&#123; n &#125;&#125; &lt;<span class="regexp">/span&gt;</span></div><div class="line"><span class="regexp">&lt;/</span>div&gt;</div></pre></td></tr></table></figure></p><h6 id="template"><a href="#template" class="headerlink" title="template"></a>template</h6><p>可使用於<code>template</code>內<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;ul&gt;</div><div class="line">  &lt;template v-<span class="keyword">for</span>=<span class="string">"item in items"</span>&gt;</div><div class="line">    &lt;li&gt;&#123;&#123; item.msg &#125;&#125;&lt;<span class="regexp">/li&gt;</span></div><div class="line"><span class="regexp">    &lt;li class="divider" role="presentation"&gt;&lt;/</span>li&gt;</div><div class="line">  &lt;<span class="regexp">/template&gt;</span></div><div class="line"><span class="regexp">&lt;/u</span>l&gt;</div></pre></td></tr></table></figure></p><h6 id="v-if-1"><a href="#v-if-1" class="headerlink" title="v-if"></a>v-if</h6><p><code>v-for</code>同階層，再加上<code>v-if</code>來過濾資料，等於<code>符合v-if中宣告條件</code>才會被印出<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;li v-<span class="keyword">for</span>=<span class="string">"todo in todos"</span> v-<span class="keyword">if</span>=<span class="string">"!todo.isComplete"</span>&gt;</div><div class="line">  &#123;&#123; todo &#125;&#125;</div><div class="line">&lt;<span class="regexp">/li&gt;</span></div></pre></td></tr></table></figure></p><h2 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h2><hr><p>筆者經驗來說，<code>v-html</code>非常少使用，除非撰寫的是<a href="https://zh.wikipedia.org/wiki/%E5%86%85%E5%AE%B9%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F" target="_blank" rel="external">CMS</a>相關系統，才需將使用者輸入及設定之html語法原始地呈現於畫面上。<code>v-if、v-show</code>會交替使用，選擇參考內文中比較，<code>v-for</code>最常使用，無論是將下拉式選單資料來源綁定於option中，Menu選單動態呈現，將查詢結果顯示於table中，但可以發現vue的directive不複雜，非常容易使用，那你還等什麼呢？</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前提情要&quot;&gt;&lt;a href=&quot;#前提情要&quot; class=&quot;headerlink&quot; title=&quot;前提情要&quot;&gt;&lt;/a&gt;前提情要&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;前一篇已介紹了Vue基本語法，筆者相信應該是有辦法撰寫簡單的邏輯，接下來這一篇介紹&lt;code&gt;v開頭directive&lt;/code&gt;相關技巧及知識，筆者使用工具及環境參考上一篇「Vue基本語法」。&lt;br&gt;
    
    </summary>
    
      <category term="vue" scheme="http://eugenesu0515.github.io/categories/vue/"/>
    
    
      <category term="vue" scheme="http://eugenesu0515.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue系列文章三：Vue基本語法</title>
    <link href="http://eugenesu0515.github.io/2018/05/24/Vue%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0%E4%B8%89%EF%BC%9AVue%E5%9F%BA%E6%9C%AC%E8%AA%9E%E6%B3%95/"/>
    <id>http://eugenesu0515.github.io/2018/05/24/Vue系列文章三：Vue基本語法/</id>
    <published>2018-05-24T11:12:29.000Z</published>
    <updated>2018-06-25T07:23:02.554Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前提情要"><a href="#前提情要" class="headerlink" title="前提情要"></a>前提情要</h2><hr><p>前兩篇的基本設置教學，筆者相信大家已學會基本設定並撰寫vue application，此篇介紹基本語法及應用並說明。</p><p>此篇雖然想以<a href="https://vuejs.org/v2/guide/" target="_blank" rel="external">Vue官網教學</a>順序做介紹，但筆者認為已學會某種技術，應該是要以自己角度分類並介紹，且要加上經驗分享，還可藉由驗證自己的不足，因此若不習慣內容編排方式，多加見諒。</p><p>簡單介紹一下筆者接下來會使用的環境如下：</p><ul><li>編輯器：<a href="https://code.visualstudio.com/" target="_blank" rel="external">VisualStudioCode</a></li><li>Vue版本：2.4.2 &uarr;</li><li>Chrome Extension: <a href="https://chrome.google.com/webstore/detail/vuejs-devtools/nhdogjmejiglipccpnnnanhbledajbpd" target="_blank" rel="external">Vue.js dev tools</a></li><li>VsCode Extension: <a href="https://marketplace.visualstudio.com/items?itemName=octref.vetur" target="_blank" rel="external">vetur</a></li><li>Vue App結構採用<code>webpack full</code>Template專案</li></ul><a id="more"></a><h2 id="內容"><a href="#內容" class="headerlink" title="內容"></a>內容</h2><hr><!-- toc --><h3 id="Mustache語法"><a href="#Mustache語法" class="headerlink" title="Mustache語法"></a>Mustache語法</h3><p>我們就從<code>Mustache語法</code>開始說起，我們資料綁定顯示時需使用<code>Mustache語法</code>，以兩個大刮號包起參數名稱。</p><ul><li><p>Html部份</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>Message: &#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div></pre></td></tr></table></figure></li><li><p>Javascript部份</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</div><div class="line">    data()&#123;</div><div class="line">        <span class="keyword">return</span> &#123;</div><div class="line">            msg: <span class="string">"Hello World"</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>效果如下<br><span>Hello World</span> </p></li></ul><h3 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h3><h4 id="介紹語法"><a href="#介紹語法" class="headerlink" title="介紹語法"></a>介紹語法</h4><p>若想要動態設定html控制項屬性，則無法使用<code>Mustache語法</code>，需使用<code>v-bind</code>關鍵字，套用如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:id</span>=<span class="string">"dynamicId"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><p>我們會在data區塊綁定其<code>dynamicId</code>的值，再透過<code>v-bind</code>directive可以動態設定id值。再舉一個簡單例子，我們在頁面上表單會有下拉式選單，我們會透過呼叫API取得source後，render於下拉式選單元件上，這時也是得透過<code>v-bind</code>來綁定，範例如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">class</span>=<span class="string">"form-control"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">v-bind:value</span>=<span class="string">"item.value"</span> </span></div><div class="line"><span class="tag">        <span class="attr">v-for</span>=<span class="string">"item in selectedOptions"</span>&gt;</span></div><div class="line">        &#123;&#123;item.text&#125;&#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">option</span>&gt;</span>   </div><div class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></div></pre></td></tr></table></figure><blockquote><p>以上範例，使用<code>v-bind</code>指定其option的value值<br><code>v-for</code>可以先行忽略，下篇會有詳細的說明</p></blockquote><p>針對<code>v-bind</code>directive，我們可以簡寫為<code>:</code>表示。</p><ul><li><p>原始</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:id</span>=<span class="string">"dynamicId"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></li><li><p>簡寫後</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:id</span>=<span class="string">"dynamicId"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><blockquote><p>簡寫後版面乾淨許多，不過這個完全看個人的習慣，沒有好壞對錯之分</p></blockquote></li></ul><p><code>v-bind</code>基本上對於任何html屬性皆可動態綁定，官網針對class與style綁定有特別說明，筆者就不再多加敘述，請參考<a href="https://vuejs.org/v2/guide/class-and-style.html" target="_blank" rel="external">class與style綁定</a>章節。</p><h3 id="v-on"><a href="#v-on" class="headerlink" title="v-on"></a>v-on</h3><h4 id="介紹語法-1"><a href="#介紹語法-1" class="headerlink" title="介紹語法"></a>介紹語法</h4><p>任何Html原生事件event皆可透過<code>v-on</code>做監聽，最簡單例子就是</p><ul><li><p>Html部份</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"someMethod()"</span>&gt;</span>按我觸發click事件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div></pre></td></tr></table></figure></li><li><p>Javascript部份</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">default</span>(&#123;</div><div class="line">    name: <span class="string">'MyComponent'</span>,</div><div class="line">    data()&#123;<span class="keyword">return</span>&#123;&#125;&#125;,</div><div class="line">    methods:&#123;</div><div class="line">        someMethod: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            alert(<span class="string">'Click Event Trigger!!'</span>)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></li><li><p>效果如下</p><button onclick="alert('Click Event Trigger!!');">按我觸發click事件</button></li></ul><p>針對<code>v-on</code>directive，我們可以簡寫為<code>@</code>表示。</p><ul><li><p>原始</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"someMethod()"</span>&gt;</span>按我觸發click事件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div></pre></td></tr></table></figure></li><li><p>簡寫後</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"someMethod()"</span>&gt;</span>按我觸發click事件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div></pre></td></tr></table></figure></li></ul><h4 id="event參數"><a href="#event參數" class="headerlink" title="$event參數"></a>$event參數</h4><p>我們就以上面的<code>@click</code>例子來看看，function中傳入$event參數，看他到底是為何物？筆者就改寫一下呼叫的method中加入$event參數</p><ul><li>html部份</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">click</span>=<span class="string">'someMethod($event)'</span>&gt;</span>點我看$event<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div></pre></td></tr></table></figure><ul><li>javascript部份(僅貼出methods options區塊)</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">methods: &#123;</div><div class="line">    someMethod: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(event);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>我們來看一下印出來的結果吧</p><img src="/Blog/2018/05/24/Vue系列文章三：Vue基本語法/event_console_log.jpg" alt="[event_console_log]" title="[event_console_log]"><p>以上，event的資料，做進一步的判斷及處理是很夠的，但vue本身也有提供一些常見的處理包裝而成的修飾符，我們就來看下一節的介紹。</p><h4 id="event-modifiers-修飾符"><a href="#event-modifiers-修飾符" class="headerlink" title="event modifiers(修飾符)"></a>event modifiers(修飾符)</h4><p>若有撰寫過<code>jquery</code>，應該對於<code>preventDefault()</code>不陌生才對，等於html原生觸發的事件先行濾掉，只執行自行撰寫的處理邏輯，vue這邊提供相對應的修飾符可套用於<code>v-on</code>中</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click.prevent</span>=<span class="string">"doThis"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure><p>目前提供的修飾符有</p><ul><li>stop</li><li>prevent</li><li>capture</li><li>self</li><li>once<code>vue2.1.4以後版本才有</code></li><li>passive<code>vue2.3.0以後版本才有</code></li></ul><p>官網的範例就已經滿清楚的<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- the click event's propagation will be stopped --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click.stop</span>=<span class="string">"doThis"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- the submit event will no longer reload the page --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">v-on:submit.prevent</span>=<span class="string">"onSubmit"</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- modifiers can be chained --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click.stop.prevent</span>=<span class="string">"doThat"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- just the modifier --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">v-on:submit.prevent</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- use capture mode when adding the event listener --&gt;</span></div><div class="line"><span class="comment">&lt;!-- i.e. an event targeting an inner element is handled here before being handled by that element --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-on:click.capture</span>=<span class="string">"doThis"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- only trigger handler if event.target is the element itself --&gt;</span></div><div class="line"><span class="comment">&lt;!-- i.e. not from a child element --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-on:click.self</span>=<span class="string">"doThat"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p><h4 id="key-modifires-修飾符"><a href="#key-modifires-修飾符" class="headerlink" title="key modifires(修飾符)"></a>key modifires(修飾符)</h4><p>顧名思義，在監聽<code>keyup</code>事件時，可加修飾符，更精確的指定是哪一個按鍵，vue提供已包裝好常見的如下</p><ul><li>enter</li><li>tab</li><li>delete <code>delete鍵和backspace鍵皆會觸發</code></li><li>esc</li><li>space</li><li>up</li><li>down</li><li>left</li><li>right</li></ul><p>這邊vue提供一個擴充點，若我們想監聽的按鍵不在上面列的裡面，全域的設定按鍵對應的keycode<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// enable `v-on:keyup.f1`</span></div><div class="line">Vue.config.keyCodes.f1 = <span class="number">112</span></div></pre></td></tr></table></figure></p><p>以上的設定後，我們在頁面上使用<code>v-on:keyup.f1</code>的方式監聽keycode為112的F1按鍵事件。若想知道哪些按鍵的對應keycode，可以玩一下這個網站 <a href="http://keycode.info/" target="_blank" rel="external">keycode.info</a>，滿有趣的。想要直接看完整的對應資訊，可以參考這個mozilla提供的<a href="https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/keyCode" target="_blank" rel="external">keycode列表</a>。</p><p>若不想自行定義，vue在<code>2.5.0版本後</code>提供自動對應keycode，意即會將<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> @<span class="attr">keyup.page-down</span>=<span class="string">"onPageDown"</span>&gt;</span></div></pre></td></tr></table></figure></p><p>vue會很聰明的幫你轉換成<code>$event.key === &#39;PageDown&#39;</code>，但是要記得不包含那種有爭議性的按鍵，例如在<code>IE9</code>環境中很多keycode，如<code>esc</code>及其他<code>箭頭按鍵</code>會與其他瀏覽器環境是不一樣的。這樣筆者會建議以全域的方式自行定義keycode來使用相對保險。還有一些進階的系統按鍵、組合鍵及滑鼠鍵議題，筆者就不在此列出，參考<a href="https://vuejs.org/v2/guide/events.html#System-Modifier-Keys" target="_blank" rel="external">官網介紹</a>。</p><h3 id="使用javascript表達式"><a href="#使用javascript表達式" class="headerlink" title="使用javascript表達式"></a>使用javascript表達式</h3><p>你可以在<code>Mustache語法</code>或其他任何資料綁定方式中寫上javascript運算邏輯。例如：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&#123;&#123; number + 1 &#125;&#125;</div><div class="line"></div><div class="line">&#123;&#123; ok ? 'YES' : 'NO' &#125;&#125;</div><div class="line"></div><div class="line">&#123;&#123; message.split('').reverse().join('') &#125;&#125;</div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:id</span>=<span class="string">"'list-' + id"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p><div class="alert danger"><p>基於程式閱讀及擴充性，筆者建議盡量少使用這種內嵌式javascript運算邏輯，盡量使用methods/computed/watch等來取代，應該把javascript邏輯寫在script區塊中</p></div><h2 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h2><hr><p>以上，主要是介紹了<code>Mustache語法</code> 、透過<code>v-bind</code>html屬性值動態生成及使用<code>v-on</code>監聽html原生事件。或許單學這些語法會覺得無趣，且第一次看的話應該也不會有特別的感覺，筆者建議是要記住vue做得到哪些東西，等於是<code>大標題要記得</code>，實際撰寫時忘記了的話再查官網的範例即可，筆者寫此篇目的也是如此，希望也有幫助到你，下篇再見。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前提情要&quot;&gt;&lt;a href=&quot;#前提情要&quot; class=&quot;headerlink&quot; title=&quot;前提情要&quot;&gt;&lt;/a&gt;前提情要&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;前兩篇的基本設置教學，筆者相信大家已學會基本設定並撰寫vue application，此篇介紹基本語法及應用並說明。&lt;/p&gt;
&lt;p&gt;此篇雖然想以&lt;a href=&quot;https://vuejs.org/v2/guide/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Vue官網教學&lt;/a&gt;順序做介紹，但筆者認為已學會某種技術，應該是要以自己角度分類並介紹，且要加上經驗分享，還可藉由驗證自己的不足，因此若不習慣內容編排方式，多加見諒。&lt;/p&gt;
&lt;p&gt;簡單介紹一下筆者接下來會使用的環境如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;編輯器：&lt;a href=&quot;https://code.visualstudio.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;VisualStudioCode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Vue版本：2.4.2 &amp;uarr;&lt;/li&gt;
&lt;li&gt;Chrome Extension: &lt;a href=&quot;https://chrome.google.com/webstore/detail/vuejs-devtools/nhdogjmejiglipccpnnnanhbledajbpd&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Vue.js dev tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;VsCode Extension: &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=octref.vetur&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;vetur&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Vue App結構採用&lt;code&gt;webpack full&lt;/code&gt;Template專案&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="vue" scheme="http://eugenesu0515.github.io/categories/vue/"/>
    
    
      <category term="vue" scheme="http://eugenesu0515.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue系列文章二：VueWepackTemplate檔案結構介紹</title>
    <link href="http://eugenesu0515.github.io/2018/04/25/Vue%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0%E4%BA%8C%EF%BC%9AVueWepackTemplate%E6%AA%94%E6%A1%88%E7%B5%90%E6%A7%8B%E4%BB%8B%E7%B4%B9/"/>
    <id>http://eugenesu0515.github.io/2018/04/25/Vue系列文章二：VueWepackTemplate檔案結構介紹/</id>
    <published>2018-04-25T05:09:37.000Z</published>
    <updated>2018-04-26T09:28:37.867Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前提情要"><a href="#前提情要" class="headerlink" title="前提情要"></a>前提情要</h2><hr><p>上一篇介紹到<code>vue-cli</code>建立vue application，其中筆者示範選擇以<code>webpack template</code>作為預設專案結構。這一篇就來簡單介紹一下專案中的檔案結構以及經驗分享。</p><a id="more"></a><h2 id="內容"><a href="#內容" class="headerlink" title="內容"></a>內容</h2><hr><p>先來貼一張vscode開啟後檔案結構：</p><img src="/Blog/2018/04/25/Vue系列文章二：VueWepackTemplate檔案結構介紹/vue_test_app_file.jpg" alt="[vue_test_app_file]" title="[vue_test_app_file]"><p>以下解釋一下每個資料夾的用意，詳細參考 <a href="http://vuejs-templates.github.io/webpack" target="_blank" rel="external">vue webpack template document</a>，內容就以筆者到目前為止更改過的設定去做說明。</p><h3 id="build"><a href="#build" class="headerlink" title="build"></a><strong>build</strong></h3><p>顧名思義，建置相關設定是在這目錄中的檔案設定，主要是<code>hot loader</code>及打包壓縮相關設定。此目錄中會調整到的檔案屬<code>webpack</code>開頭之檔案，還可為dev及prod做特別不同的設定。</p><p>若你是與筆者一樣是使用bootstrap作為網站切版基底則，且已經有<code>UI/UX</code>提供jquery效果則需要多加一些設定。設定步驟為</p><ul><li><code>npm install</code>方式安裝jquery、popperjs及bootstrap</li><li>在<code>webpack.base.conf.js</code>加<code>plugins</code>相關設定</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// const宣告區塊中增加</span></div><div class="line"><span class="comment">// 載入webpack</span></div><div class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>)</div></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// module.exports中增加plugins option</span></div><div class="line">plugins:[</div><div class="line">    <span class="keyword">new</span> webpack.ProvidePlugin(&#123;</div><div class="line">        $: <span class="string">'jquery'</span>,</div><div class="line">        jQuery: <span class="string">'jquery'</span>,</div><div class="line">        <span class="string">'window.jQuery'</span>: <span class="string">'jquery'</span>,</div><div class="line">        Popper: [<span class="string">'popper.js'</span>, <span class="string">'default'</span>]</div><div class="line">    &#125;)</div><div class="line">]</div></pre></td></tr></table></figure><div class="alert danger no-icon"><p>切記：套用bootstrap4需安裝popperjs</p></div><p>上述設定完畢後，我們就直接在vue進入點<code>App.vue</code>的<code>script</code>區塊中import jquery以及<code>mounted</code>事件中把<code>UI/UX</code>提供的jquery code貼上去就大功告成。不方便在此直接秀公司的公版套用過程，先以敘述帶過，我再找時間補一篇套用<a href="https://startbootstrap.com/template-overviews/sb-admin-2/" target="_blank" rel="external">sbadmin2</a>的完整過程，比較會有感同身受。</p><h3 id="config"><a href="#config" class="headerlink" title="config"></a><strong>config</strong></h3><p>專案環境變數相關設定，基本上就是在程式撰寫中依照development及prodution不同而變動的資料可以再此目錄中設定。</p><ul><li>index.js<br>預設會有兩種環境設定，<code>dev</code>及<code>prod(build)</code>，因此<code>npm run dev</code>時使用的port可於此設定以及<code>cors</code>問題可用<code>proxyTable</code>的方式解決，參考<a href="https://kuro.tw/posts/2017/06/07/%E5%A6%82%E4%BD%95%E5%9C%A8-Vue-CLI-%E5%BB%BA%E7%AB%8B%E7%9A%84%E9%96%8B%E7%99%BC%E7%92%B0%E5%A2%83%E5%91%BC%E5%8F%AB%E8%B7%A8%E5%9F%9F%E9%81%A0%E7%AB%AF-RESTful-APIs/" target="_blank" rel="external">呼叫跨網域API解決方式</a>，筆者開發到目前為止，只改過這兩個設定，其他設定皆採用預設值。</li><li>dev.env.js、prod.env.js<br>這兩個檔案中會建立同樣的key值不同value，透過跑<code>npm run dev/build</code>方式以不同的設定值去取代，舉個例子會比較好理解，在開發端及正式伺服器上呼叫的api網址會有所不一樣，這時就可以在這設定。</li></ul><figure class="codeblock codeblock--tabbed"><figcaption><span>env.js</span><ul class="tabs"><li class="tab active">dev</li><li class="tab">prod</li></ul></figcaption><div class="tabs-content"><figure class="highlight plain" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">API_BASE_URL: '"http://localhost:5000/api"'</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain" style="display: none;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">API_BASE_URL: '"http://serverip:5000/api"'</span><br></pre></td></tr></tbody></table></figure></div></figure><div class="alert danger no-icon"><p>設定值需要按照格式，一定要使用一組單引號中有雙引號的方式<code>&#39;&quot;&quot;&#39;</code></p></div><p>在vue程式中使用方式為<code>process.env.key</code>，以上述例子來說宣告為</p><blockquote><p>process.env.API_BASE_URL</p></blockquote><div class="alert danger no-icon"><p>需要注意的是設定完成後，需要重跑一次<code>npm run dev/build</code>才會生效</p></div><h3 id="node-modules"><a href="#node-modules" class="headerlink" title="node_modules"></a><strong>node_modules</strong></h3><p>安裝的套件皆在此目錄中。這目錄就不多加敘述。不過有時引用vue套件的話，透過觀看該套件的原始碼，也可以偷學到一些vue撰寫招數，也是滿有收穫的，不過就要先有基本概念再去參考，以免一開始就學到偷吃步的招數而走歪。</p><h3 id="src"><a href="#src" class="headerlink" title="src"></a><strong>src</strong></h3><p>Vue程式在此目錄中撰寫。筆者目前就以功能面(模組)作為切分資料夾的依據存放Component，這就看各自的開發習慣作切割，以好找為主。</p><h3 id="static"><a href="#static" class="headerlink" title="static"></a><strong>static</strong></h3><p>若有些特殊頁面不與vue相關，需要獨立宣告的靜態檔案可放與此。筆者就有經驗，因在實作Single sign out功能，使用過<a href="http://identityserver.io/" target="_blank" rel="external">Identity Server4</a>，Vue前端專案當作client與Identity Server互動時就需要撰寫callback程式，就會需要宣告於此目錄中，參考 <a href="https://github.com/saitolabs/vuejs-oidc-client" target="_blank" rel="external">vuejs-oidc-client</a>。</p><h2 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h2><hr><p>此篇簡單的介紹一下<code>webpack</code>預設template產生之資料夾結構，若想要自己重頭設定起筆者推薦此篇 <a href="https://segmentfault.com/a/1190000005363030" target="_blank" rel="external">vue+webpack起手式</a>，筆者出社會後都以C#作為主要開發語言，加上開發產品功能還是要緊，就先使用預設範本下去開發。不過還是要先看過這兩篇</p><ul><li><a href="http://vuejs-templates.github.io/webpack" target="_blank" rel="external">vue webpack template document</a></li><li><a href="https://segmentfault.com/a/1190000005363030" target="_blank" rel="external">vue+webpack起手式</a></li></ul><p>才會有概念，到時遇到問題時就會知道要在<a href="www.google.com">google</a>下甚麼關鍵字了。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前提情要&quot;&gt;&lt;a href=&quot;#前提情要&quot; class=&quot;headerlink&quot; title=&quot;前提情要&quot;&gt;&lt;/a&gt;前提情要&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;上一篇介紹到&lt;code&gt;vue-cli&lt;/code&gt;建立vue application，其中筆者示範選擇以&lt;code&gt;webpack template&lt;/code&gt;作為預設專案結構。這一篇就來簡單介紹一下專案中的檔案結構以及經驗分享。&lt;/p&gt;
    
    </summary>
    
      <category term="vue" scheme="http://eugenesu0515.github.io/categories/vue/"/>
    
    
      <category term="vue" scheme="http://eugenesu0515.github.io/tags/vue/"/>
    
      <category term="webpack" scheme="http://eugenesu0515.github.io/tags/webpack/"/>
    
      <category term="vue-cli" scheme="http://eugenesu0515.github.io/tags/vue-cli/"/>
    
  </entry>
  
  <entry>
    <title>Vue系列文章一：Vue簡介</title>
    <link href="http://eugenesu0515.github.io/2018/04/23/Vue%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0%E4%B8%80%EF%BC%9AVue%E7%B0%A1%E4%BB%8B/"/>
    <id>http://eugenesu0515.github.io/2018/04/23/Vue系列文章一：Vue簡介/</id>
    <published>2018-04-23T10:56:34.000Z</published>
    <updated>2018-04-25T03:52:42.038Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前提情要"><a href="#前提情要" class="headerlink" title="前提情要"></a>前提情要</h2><hr><p>目前公司開發產品選擇<a href="https://vuefe.cn/v2/guide/" target="_blank" rel="external">vue.js</a>作為前端開發框架，選擇原因不外呼是</p><ul><li>容易上手</li><li>考量到產品之後會由大陸團隊接手</li><li>Virtual Dom設計，效能方面不需要擔心</li></ul><a id="more"></a><h2 id="內容"><a href="#內容" class="headerlink" title="內容"></a>內容</h2><hr><p>產品開發之路是遙遠的路途，就決定好好研究它吧，起手式當然是要來寫一支<code>Hello World</code>程式。</p><p>Vue的好處之一是若舊網站某些頁面很吃重前端效果則可考慮在該頁單獨使用它，可以感受model雙向綁定帶來的好處。這種方式只要將vue檔案載入就可以開始使用vue了。</p><h3 id="使用vue方式一"><a href="#使用vue方式一" class="headerlink" title="使用vue方式一"></a>使用vue方式一</h3><blockquote><p>載入vue.js檔案即可在頁面使用vue</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- body區塊結尾前宣告 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure><p>載入完畢後，來初始化吧</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// script區塊中宣告</span></div><div class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</div><div class="line">  el: <span class="string">'#app'</span>,<span class="comment">//作用域</span></div><div class="line">  data: &#123;</div><div class="line">    message: <span class="string">'Hello Vue!'</span></div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure><p>最後套用於body區塊中，在任意<code>div</code>中套用id為app，在該範圍中vue就生效了。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- body區塊中宣告 --&gt;</span></div><div class="line"><span class="comment">&lt;!--對應作用域選取元素--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">  &#123;&#123; message &#125;&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><p>完整html檔案如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Test Vue<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">      &#123;&#123;message&#125;&#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">        <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></div><div class="line"><span class="javascript">            el: <span class="string">'#app'</span>, <span class="comment">//作用域</span></span></div><div class="line"><span class="undefined">            data: &#123;</span></div><div class="line"><span class="javascript">                message: <span class="string">'Hello Vue!'</span></span></div><div class="line"><span class="undefined">            &#125;</span></div><div class="line"><span class="undefined">        &#125;)</span></div><div class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure><h3 id="使用vue方式二"><a href="#使用vue方式二" class="headerlink" title="使用vue方式二"></a>使用vue方式二</h3><blockquote><p>利用vue-cli建立完整的前端專案</p></blockquote><p>首先要先提到vue-cli工具，可透過<a href="https://www.npmjs.com/" target="_blank" rel="external">npm</a>進行安裝，指令如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g vue-cli</div></pre></td></tr></table></figure><p>使用<code>vue --version</code>來確認是否安裝成功，若出現版號，恭喜你成功了(筆者這邊環境是會出現<code>2.8.2</code>)。我們可以使用<code>vue help</code>來觀看一下支援哪些command吧。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">λ  vue help</div><div class="line"></div><div class="line">  Usage: vue &lt;command&gt; [options]</div><div class="line"></div><div class="line"></div><div class="line">  Options:</div><div class="line"></div><div class="line">    -V, --version  output the version number</div><div class="line">    -h, --help     output usage information</div><div class="line"></div><div class="line"></div><div class="line">  Commands:</div><div class="line"></div><div class="line">    init        generate a new project from a template</div><div class="line">    list        list available official templates</div><div class="line">    build       prototype a new project</div><div class="line">    help [cmd]  display help for [cmd]</div></pre></td></tr></table></figure><p>我們等等建立vue application時會使用到<code>list</code> <code>init</code>指令來完成。</p><p>首先先使用<code>vue list</code>觀看一下有哪些現成template可使用，參考如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">λ  vue list</div><div class="line"></div><div class="line">  Available official templates:</div><div class="line"></div><div class="line">  ★  browserify - A full-featured Browserify + vueify setup with hot-reload, linting &amp; unit testing.</div><div class="line">  ★  browserify-simple - A simple Browserify + vueify setup for quick prototyping.</div><div class="line">  ★  pwa - PWA template for vue-cli based on the webpack template</div><div class="line">  ★  simple - The simplest possible Vue setup in a single HTML file</div><div class="line">  ★  webpack - A full-featured Webpack + vue-loader setup with hot reload, linting, testing &amp; css extraction.</div><div class="line">  ★  webpack-simple - A simple Webpack + vue-loader setup for quick prototyping.</div></pre></td></tr></table></figure><p>若使用vue撰寫純前端的application則建議直衝webpack(full)，主要支援<code>hot reload</code>，亦可選擇並設定好<code>router</code>相關設定。跟著筆者一起建立vue application吧。</p><blockquote><p>使用<code>init</code>初始化專案，<code>webpack</code>關鍵字為選擇vue-cli提供之webpack template，最後名稱是專案名稱，使用<code>VueTestApp</code>。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vue init webpack VueTestApp</div></pre></td></tr></table></figure><p>執行步驟為</p><ul><li>進入到專案資料夾</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cd VueTestApp</div></pre></td></tr></table></figure><ul><li>安裝npm套件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install</div></pre></td></tr></table></figure><ul><li><code>npm run</code>方式執行Application</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm run dev</div></pre></td></tr></table></figure><p>瀏覽<code>http://localhost:8080</code>，看到以下畫面，那就再次恭喜你了，達成成功撰寫vue application成就。</p><img src="/Blog/2018/04/23/Vue系列文章一：Vue簡介/vue_app.jpg" alt="[vue_app]" title="[vue_app]"><h2 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h2><hr><p>看完內容中的教學，應該可以感受到建置vue application並不困難，簡單幾個步驟即可開始撰寫，選vue準沒錯。</p><p>最後筆者期許自己能夠寫完一系列的教學文，下一篇要來介紹一下webpack template建立之資料夾結構及各檔案的說明。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前提情要&quot;&gt;&lt;a href=&quot;#前提情要&quot; class=&quot;headerlink&quot; title=&quot;前提情要&quot;&gt;&lt;/a&gt;前提情要&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;目前公司開發產品選擇&lt;a href=&quot;https://vuefe.cn/v2/guide/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;vue.js&lt;/a&gt;作為前端開發框架，選擇原因不外呼是&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;容易上手&lt;/li&gt;
&lt;li&gt;考量到產品之後會由大陸團隊接手&lt;/li&gt;
&lt;li&gt;Virtual Dom設計，效能方面不需要擔心&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="vue" scheme="http://eugenesu0515.github.io/categories/vue/"/>
    
    
      <category term="vue" scheme="http://eugenesu0515.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>VSCode技巧：檔案比對差異</title>
    <link href="http://eugenesu0515.github.io/2018/04/23/VSCode%E6%8A%80%E5%B7%A7%EF%BC%9A%E6%AA%94%E6%A1%88%E6%AF%94%E5%B0%8D%E5%B7%AE%E7%95%B0/"/>
    <id>http://eugenesu0515.github.io/2018/04/23/VSCode技巧：檔案比對差異/</id>
    <published>2018-04-23T00:45:08.000Z</published>
    <updated>2018-04-23T11:02:44.122Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前提情要"><a href="#前提情要" class="headerlink" title="前提情要"></a>前提情要</h2><hr><p>多人開發的專案，最容易發生的衝突是設定檔案，如Vue專案中<code>router/index.js</code>，每個人的各自component需要import與設定其url，筆者公司採用<a href="https://subversion.apache.org/" target="_blank" rel="external">svn</a>作為版空工具，在各自處理衝突的情況下，該檔案真的是不堪入目。</p><p>時間一久，可能連routing功能都會被影響到，因檔案亂掉的關係，有些url失效或者設定階層不對，連Layout都長不出來，給客戶測試前，是必須整理一下了。</p><p>因有layout關係，必須將其他component所屬url必須放置於layout的children設定中，有些人沒有仔細看就直接將設定寫在layout同層，有些url還被設定到兩次，太氣了，讓筆者murmur一下。</p><a id="more"></a><h2 id="內容"><a href="#內容" class="headerlink" title="內容"></a>內容</h2><hr><p>所以筆者就把layout同層的剪下後貼到另一支新開的檔案中，想要與原檔案比對的方式，把重複的整理一下並塞回正常的設定階層中。有上網找一下檔案比對的工具，例如：<a href="https://free.com.tw/diffchecker/" target="_blank" rel="external">diffchecker</a>，但總覺得不想離開vscode去操作其他軟體阿，索性搜索一下vscode是否具備檔案比對功能，太神拉，還真的有。</p><p>我們就以vue預設webpack template中的router/index.js為例，再新增一個檔案，將原本的貼上後多一個數字2。</p><ul><li>第一步驟需在欲比對的新檔案上按右鍵選擇<code>Select for compare</code></li></ul><img src="/Blog/2018/04/23/VSCode技巧：檔案比對差異/SelectForCompare.jpg" alt="[SelectForCompare]" title="[SelectForCompare]"><ul><li>第二步驟則在欲比對的原始檔案上按右鍵選擇<code>Compare with Selected</code></li></ul><img src="/Blog/2018/04/23/VSCode技巧：檔案比對差異/CompareWithSelected.jpg" alt="[CompareWithSelected]" title="[CompareWithSelected]"><ul><li>比對成就達成</li></ul><img src="/Blog/2018/04/23/VSCode技巧：檔案比對差異/CompareResult.jpg" alt="[CompareWithSelected]" title="[CompareWithSelected]"><h2 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h2><hr><p>當然上述例子應該透過改善程式上版流程且遇到衝突時應該就要被解決，千萬不要學筆者積了一堆route設定後才來調，心臟要很大顆阿。</p><p>使用vscode來比對檔案，有一種熟悉的感覺-版空中的解決衝突的畫面，對於有版空習慣的程式撰寫者來說，應該是很容易看出不一樣的地方，非常推薦給大家。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前提情要&quot;&gt;&lt;a href=&quot;#前提情要&quot; class=&quot;headerlink&quot; title=&quot;前提情要&quot;&gt;&lt;/a&gt;前提情要&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;多人開發的專案，最容易發生的衝突是設定檔案，如Vue專案中&lt;code&gt;router/index.js&lt;/code&gt;，每個人的各自component需要import與設定其url，筆者公司採用&lt;a href=&quot;https://subversion.apache.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;svn&lt;/a&gt;作為版空工具，在各自處理衝突的情況下，該檔案真的是不堪入目。&lt;/p&gt;
&lt;p&gt;時間一久，可能連routing功能都會被影響到，因檔案亂掉的關係，有些url失效或者設定階層不對，連Layout都長不出來，給客戶測試前，是必須整理一下了。&lt;/p&gt;
&lt;p&gt;因有layout關係，必須將其他component所屬url必須放置於layout的children設定中，有些人沒有仔細看就直接將設定寫在layout同層，有些url還被設定到兩次，太氣了，讓筆者murmur一下。&lt;/p&gt;
    
    </summary>
    
      <category term="vscode" scheme="http://eugenesu0515.github.io/categories/vscode/"/>
    
    
      <category term="vscode" scheme="http://eugenesu0515.github.io/tags/vscode/"/>
    
      <category term="compare file" scheme="http://eugenesu0515.github.io/tags/compare-file/"/>
    
  </entry>
  
  <entry>
    <title>VSCode技巧：vue開發套件vetur相關設定</title>
    <link href="http://eugenesu0515.github.io/2018/04/21/VSCode%E6%8A%80%E5%B7%A7%EF%BC%9Avue%E9%96%8B%E7%99%BC%E5%A5%97%E4%BB%B6vetur%E7%9B%B8%E9%97%9C%E8%A8%AD%E5%AE%9A/"/>
    <id>http://eugenesu0515.github.io/2018/04/21/VSCode技巧：vue開發套件vetur相關設定/</id>
    <published>2018-04-21T13:33:38.000Z</published>
    <updated>2018-04-23T03:05:58.339Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前提情要"><a href="#前提情要" class="headerlink" title="前提情要"></a>前提情要</h2><hr><p>目前專案選擇<a href="https://vuejs.org/" target="_blank" rel="external">vue.js</a>作為前端開發使用Framework，開發工具選擇VsCode的狀況下，筆者搜尋一下相關plugins，發現<a href="https://github.com/vuejs/vetur" target="_blank" rel="external">vetur</a>下載率很高，含基本的</p><ul><li><code>syntax highlighting</code> </li><li><code>Snippet</code> </li><li><code>Auto Completion</code></li></ul><p>對筆者來說已足夠，趕緊下載來試用。稍微觀看一下該套件格式化相關設定，對於vue webpack template開發來說，需要再手動設定。</p><a id="more"></a><h2 id="內容"><a href="#內容" class="headerlink" title="內容"></a>內容</h2><hr><p>若以vue-cli產生之template開發則會以獨立vue檔案的形式開發，vetur在格式化預設設定中不包含html部份，參考 <a href="https://github.com/vuejs/vetur/blob/master/docs/formatting.md" target="_blank" rel="external">https://github.com/vuejs/vetur/blob/master/docs/formatting.md</a></p><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"vetur.format.defaultFormatter.html"</span>: <span class="string">"none"</span>,</div><div class="line">  <span class="attr">"vetur.format.defaultFormatter.css"</span>: <span class="string">"prettier"</span>,</div><div class="line">  <span class="attr">"vetur.format.defaultFormatter.postcss"</span>: <span class="string">"prettier"</span>,</div><div class="line">  <span class="attr">"vetur.format.defaultFormatter.scss"</span>: <span class="string">"prettier"</span>,</div><div class="line">  <span class="attr">"vetur.format.defaultFormatter.less"</span>: <span class="string">"prettier"</span>,</div><div class="line">  <span class="attr">"vetur.format.defaultFormatter.stylus"</span>: <span class="string">"stylus-supremacy"</span>,</div><div class="line">  <span class="attr">"vetur.format.defaultFormatter.js"</span>: <span class="string">"prettier"</span>,</div><div class="line">  <span class="attr">"vetur.format.defaultFormatter.ts"</span>: <span class="string">"prettier"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>因此我們就針對html來做設定，<code>Ctrl+,</code>叫出Vscode的UserSettings，可設定為<code>prettier</code>:<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">"vetur.format.defaultFormatter.html": "prettier",</div></pre></td></tr></table></figure></p><p>也可以將其設定為<code>js-beautify-html</code>，請填入以下設定：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">"vetur.format.defaultFormatter.html": "js-beautify-html",</div><div class="line">"vetur.format.defaultFormatterOptions": &#123;</div><div class="line">    "js-beautify-html": &#123;</div><div class="line">        "wrap_attributes": "force-aligned"</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h2><hr><p>設定成功後，可以按下<code>Alt + Shift + F</code>來格式化vue檔案了，效果如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://vuejs.org"</span></span></div><div class="line"><span class="tag">        <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span></div><div class="line">        Core Docs</div><div class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://forum.vuejs.org"</span></span></div><div class="line"><span class="tag">        <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span></div><div class="line">        Forum</div><div class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前提情要&quot;&gt;&lt;a href=&quot;#前提情要&quot; class=&quot;headerlink&quot; title=&quot;前提情要&quot;&gt;&lt;/a&gt;前提情要&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;目前專案選擇&lt;a href=&quot;https://vuejs.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;vue.js&lt;/a&gt;作為前端開發使用Framework，開發工具選擇VsCode的狀況下，筆者搜尋一下相關plugins，發現&lt;a href=&quot;https://github.com/vuejs/vetur&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;vetur&lt;/a&gt;下載率很高，含基本的&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;syntax highlighting&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;&lt;code&gt;Snippet&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;&lt;code&gt;Auto Completion&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;對筆者來說已足夠，趕緊下載來試用。稍微觀看一下該套件格式化相關設定，對於vue webpack template開發來說，需要再手動設定。&lt;/p&gt;
    
    </summary>
    
      <category term="vscode" scheme="http://eugenesu0515.github.io/categories/vscode/"/>
    
    
      <category term="vscode" scheme="http://eugenesu0515.github.io/tags/vscode/"/>
    
      <category term="vue" scheme="http://eugenesu0515.github.io/tags/vue/"/>
    
      <category term="vetur" scheme="http://eugenesu0515.github.io/tags/vetur/"/>
    
  </entry>
  
  <entry>
    <title>VSCode技巧：解決RazorView中Emmet失效問題</title>
    <link href="http://eugenesu0515.github.io/2017/09/16/VSCode%E6%8A%80%E5%B7%A7%EF%BC%9A%E8%A7%A3%E6%B1%BARazorView%E4%B8%ADEmmet%E5%A4%B1%E6%95%88%E5%95%8F%E9%A1%8C/"/>
    <id>http://eugenesu0515.github.io/2017/09/16/VSCode技巧：解決RazorView中Emmet失效問題/</id>
    <published>2017-09-16T13:44:40.000Z</published>
    <updated>2017-09-18T06:52:29.303Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前提情要"><a href="#前提情要" class="headerlink" title="前提情要"></a>前提情要</h2><hr><p>身為Web及.net MVC開發者來說，多多少少會有機會寫到Razor View。筆者因工作上曾擔任過SA一陣子，工作內容包含劃Prototype頁面與客戶溝通作業流程及操作方式，當時案子套版基底是使用<a href="https://getbootstrap.com/docs/3.3/" target="_blank" rel="external">Bootstrap3</a>，知道需要長時間使用Bootstrap，因此筆者有下功夫熟悉它的css class。且那時有幸已知道<strong>ZenCoding</strong>(Emmet)這玩意，詳細可參考 <a href="http://blog.kkbruce.net/2012/11/zen-coding-extremely-speed-write-your-html5-css3-code.html#.Wb0uksgjGUk" target="_blank" rel="external">ZEN-CODING - 教你極速撰寫HTML5與CSS3程式碼</a>(筆者當年就被這篇文章燒到)。</p><a id="more"></a><p>再者VSCode編輯器本身早在第一版出來時就內建Zen Coding(Emmet)功能了，筆者在熟悉Bootstrap css class的背景及VSCode的Emmet支援下撰寫Prototype頁面，著實無往不利；有時還在與客戶溝通當下，都能直接快速調整靜態頁面。</p><p>筆者因最近在碰dotnet core2.0，試著撰寫ASP.NET Core MVC專案，直接使用內建範本撰寫時發現，在cshtml頁面上Zen Coding整個失效阿，對習慣使用Zen Coding的筆者來說滿崩潰的。這時要感謝一下Google的存在，馬上就找到解答了，以更改設定方式將Zen Coding效果重現於cshtml類型檔案中。</p><h2 id="內容"><a href="#內容" class="headerlink" title="內容"></a>內容</h2><hr><p>VSCode之所以有彈性的地方在於可依使用者喜好覆蓋原始設定，講更改設定前，需解釋一下Workspace及User Setting的不同。分法其實非常簡單，若該設定只作用於目前專案中，使用<strong>WorkspaceSetting</strong>去複寫設定，若全域套用設定則使用<strong>UserSetting</strong>的方式調整。</p><blockquote><p>作用域為專案則<strong>WorkspaceSetting</strong>，全域則<strong>UserSetting</strong></p></blockquote><p>上述設定各位可以使用<code>Ctrl+Shift+P</code>鍵出關鍵字能很容易搜尋到，視窗會分為兩邊，左邊為「VSCode原始設定」，右邊為「使用者複寫設定」，皆為json格式宣告，各個設定詳細解釋可參考 <a href="https://code.visualstudio.com/docs/getstarted/settings" target="_blank" rel="external">VSCode/Docs/Setting</a>。</p><p>筆者選擇UserSetting，希望每個MVC專案的View都有Emmet效果，且不用每個專案個別設定，設定如下</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">"emmet.includeLanguages": &#123;</div><div class="line">        "cshtml":"html"</div><div class="line">      &#125;,</div><div class="line">"files.associations": &#123;"*.cshtml":"html"&#125;</div></pre></td></tr></table></figure><p>第一條是設定language mapping，第二條則是副檔名為cshtml的當作html語法檔案。詳細說明參考<a href="https://code.visualstudio.com/docs/getstarted/settings" target="_blank" rel="external">VSCode/Docs/Setting</a>及<a href="https://code.visualstudio.com/docs/editor/emmet" target="_blank" rel="external">VSCode/Docs/Editor/Emmet</a>。</p><p>直接來看一下設定後的效果吧。<br><img src="/Blog/2017/09/16/VSCode技巧：解決RazorView中Emmet失效問題/CshtmlEmmet.gif" alt="[cshtml_emmet]" title="[cshtml_emmet]"></p><p>Zen Coding的技巧部份就不多加敘述，可閱讀第一段所列的部落格文章，參考其對應語法，筆者覺得只要熟悉並善用</p><ul><li>#</li><li>.</li><li>[]</li><li>&gt;</li><li>*</li></ul><p>五種的用法，足夠大家發揮出Zen Coding最大效益，其餘的用到時再查並熟悉即可。</p><h2 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h2><hr><p>雖此篇是講解以複寫設定方式解決Razor View頁面中可出現Zen Coding效果議題，但容許筆者在最後強力推薦給大家熟悉Zen Coding的好處，只要多加利用這種可快速產生html語法，身為後端工程師，在拿到設計切好的版後，以Zen Coding的角度思考並快速產生對應的Html，肯定能達到事半功倍效果， 有更多多餘時間去架構並撰寫其餘程式碼，光這點已足夠證明投資時間於Zen Coding熟悉上是值得的。</p><p>參考</p><ul><li><a href="https://segmentfault.com/q/1010000010832948" target="_blank" rel="external">https://segmentfault.com/q/1010000010832948</a></li><li><a href="https://code.visualstudio.com/docs/editor/emmet" target="_blank" rel="external">https://code.visualstudio.com/docs/editor/emmet</a></li><li><a href="http://blog.kkbruce.net/2012/11/zen-coding-extremely-speed-write-your-html5-css3-code.html#.Wb0uksgjGUk" target="_blank" rel="external">http://blog.kkbruce.net/2012/11/zen-coding-extremely-speed-write-your-html5-css3-code.html#.Wb0uksgjGUk</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前提情要&quot;&gt;&lt;a href=&quot;#前提情要&quot; class=&quot;headerlink&quot; title=&quot;前提情要&quot;&gt;&lt;/a&gt;前提情要&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;身為Web及.net MVC開發者來說，多多少少會有機會寫到Razor View。筆者因工作上曾擔任過SA一陣子，工作內容包含劃Prototype頁面與客戶溝通作業流程及操作方式，當時案子套版基底是使用&lt;a href=&quot;https://getbootstrap.com/docs/3.3/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Bootstrap3&lt;/a&gt;，知道需要長時間使用Bootstrap，因此筆者有下功夫熟悉它的css class。且那時有幸已知道&lt;strong&gt;ZenCoding&lt;/strong&gt;(Emmet)這玩意，詳細可參考 &lt;a href=&quot;http://blog.kkbruce.net/2012/11/zen-coding-extremely-speed-write-your-html5-css3-code.html#.Wb0uksgjGUk&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ZEN-CODING - 教你極速撰寫HTML5與CSS3程式碼&lt;/a&gt;(筆者當年就被這篇文章燒到)。&lt;/p&gt;
    
    </summary>
    
      <category term="vscode" scheme="http://eugenesu0515.github.io/categories/vscode/"/>
    
    
      <category term="vscode" scheme="http://eugenesu0515.github.io/tags/vscode/"/>
    
      <category term="Razor" scheme="http://eugenesu0515.github.io/tags/Razor/"/>
    
      <category term="Emmet" scheme="http://eugenesu0515.github.io/tags/Emmet/"/>
    
  </entry>
  
  <entry>
    <title>dotnet-core系列文章二：VSCode教學</title>
    <link href="http://eugenesu0515.github.io/2017/09/12/dotnet-core%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0%E4%BA%8C%EF%BC%9AVSCode%E6%95%99%E5%AD%B8/"/>
    <id>http://eugenesu0515.github.io/2017/09/12/dotnet-core系列文章二：VSCode教學/</id>
    <published>2017-09-12T00:11:27.000Z</published>
    <updated>2017-09-18T07:33:11.632Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前提情要"><a href="#前提情要" class="headerlink" title="前提情要"></a>前提情要</h2><hr><p>上一篇講到開發dotnet core相關程式，論語說「工欲善其事，必先利其器」，相當然爾，熟悉開發工具這件事情直接影響你的開發產能。因筆者現況，公司配的桌機跟自己的筆電配備上有落差，以不耗系統資源的考量下，下定決心將「Visual Studio Code」作為首選開發工具。</p><a id="more"></a><p>簡單敘述一下筆者這邊的環境</p><ul><li>VsCode：使用最新版本1.16.0</li><li>作業系統：Windows 10</li></ul><blockquote><p>以下示範內容皆為Windows環境下的快捷鍵及設定</p></blockquote><h2 id="內容"><a href="#內容" class="headerlink" title="內容"></a>內容</h2><hr><p>Visual Studio Code是<a href="https://electron.atom.io/" target="_blank" rel="external">Electron</a>建置而成，它基本上核心就是chrome v8引擎，可以想像成是在使用瀏覽器，接著筆者會以不同功能取向為分類準則，分門別類介紹目前使用上必須記得快捷鍵及小技巧。</p><h4 id="Tab操作"><a href="#Tab操作" class="headerlink" title="Tab操作"></a>Tab操作</h4><p>Tab操作與Chrome很像，基本Tab操作快捷鍵如</p><ul><li><code>Ctrl+Tab</code>:切換到最後編輯視窗，按住不動會跳出目前開啟中的檔案清單，可使用上、下鍵選擇欲切換的視窗</li><li><code>Ctrl+PgUp</code>:切換到下一個編輯視窗</li><li><code>Ctrl+PgDn</code>:切換到上一個編輯視窗</li><li><code>Ctrl+W</code>:關閉目前視窗</li></ul><img src="/Blog/2017/09/12/dotnet-core系列文章二：VSCode教學/CtrlTab_CtrlPgUp_CtrlPgDown.gif" alt="[ctrl_tab]" title="[ctrl_tab]"><p>不同的是無法使用<code>Ctrl+數字鍵</code>切換相對應數字的Tab，因VSCode有多個編輯區塊瀏覽相關用途；另Chrome上新增頁籤時使用<code>Ctrl+T</code>，對於VSCode來說是新增一個檔案，因此需習慣<code>Ctrl+N</code>熱鍵。</p><h4 id="左側欄"><a href="#左側欄" class="headerlink" title="左側欄"></a>左側欄</h4><p>左側欄由五個不同功能視窗組成，快捷鍵及對應視窗分別為</p><ul><li><code>Ctrl+Shift+E</code>檔案總管</li><li><code>Ctrl+Shift+F</code>搜尋</li><li><code>Ctrl+Shift+G</code>git</li><li><code>Ctrl+Shift+D</code>Debug</li><li><code>Ctrl+Shift+X</code>擴充套件</li></ul><p>這邊提供一個記憶的小技巧，以上共通點是都是有<code>Ctrl+Shift</code>，字母按鍵配合功能所屬英文單字記就會好記很多，例:<strong>E:Explorer</strong>，詳細參考</p><ul><li><strong>E</strong>:Explorer</li><li><strong>F</strong>:Find</li><li><strong>G</strong>:Git</li><li><strong>D</strong>:Debug</li><li><strong>X</strong>:Extension(這個稍微要變化一下，因為已經使用掉E)</li></ul><p>最後要提到<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Ctrl+B</div></pre></td></tr></table></figure></p><p>可以縮合、展開左側欄，會停駐於最後打開的視窗(視窗種類參考上述)，筆者在寫code時會常使用該快捷鍵，專心寫code時會關閉左側欄<code>Ctrl+B</code>，依照需求會直接按下<code>Ctrl+Shift+E/F/...</code>。</p><h4 id="Editor編輯區塊"><a href="#Editor編輯區塊" class="headerlink" title="Editor編輯區塊"></a>Editor編輯區塊</h4><p>一定要背的快捷鍵是<code>Ctrl+P</code>，可快速搜尋目前開啟中專案裡的檔案，參考</p><img src="/Blog/2017/09/12/dotnet-core系列文章二：VSCode教學/CtrlP.gif" alt="[Ctrl_P]" title="[Ctrl_P]"><p>接下來，筆者會把快捷鍵標示出來，配合看gif動態圖檔，就會明白其用途</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//上/下搬動選取程式碼區塊</div><div class="line">Alt+Up(Down)</div></pre></td></tr></table></figure><img src="/Blog/2017/09/12/dotnet-core系列文章二：VSCode教學/AltUpDown.gif" alt="[Alt_Up_Down]" title="[Alt_Up_Down]"><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//編輯器視窗捲軸上/下移動</div><div class="line">Ctrl+Up(Down)</div></pre></td></tr></table></figure><img src="/Blog/2017/09/12/dotnet-core系列文章二：VSCode教學/CtrlUp_CtrlDown.gif" alt="[Ctrl_Up_Down]" title="[Ctrl_Up_Down]"><h4 id="通用功能"><a href="#通用功能" class="headerlink" title="通用功能"></a>通用功能</h4><p>最重要的功能，沒有之一，主角是<code>Ctrl+Shift+P</code>，執行指令，可以打一些關鍵字搜尋出相對應的功能，筆者最常用的是</p><table><thead><tr><th>關鍵字</th><th>指令全名</th><th>功用</th></tr></thead><tbody><tr><td>Keyboard</td><td>Open Keyboard ShortCuts</td><td>打開鍵盤快捷鍵設定視窗</td></tr><tr><td>Theme</td><td>Color Theme</td><td>跳出設定Theme視窗</td></tr><tr><td>Language</td><td>Change Language Mode</td><td>變更目前開啟中的編輯視窗所屬程式語言</td></tr></tbody></table><blockquote><p>列出的Command清單中可發現右邊區塊會顯示該Command相對應的快捷鍵</p></blockquote><p>以此類推，這個快捷鍵時常會用到，安裝的外掛，常常也會伴隨著已設定好的Command可以方便使用，就以<strong>Markdown</strong>相關外掛來說，例：<a href="https://marketplace.visualstudio.com/items?itemName=mdickin.markdown-shortcuts" target="_blank" rel="external">Markdown Shortcuts</a>，安裝完成後，按下<code>Ctrl+Shift+P</code>，打下關鍵字<strong>Markdown</strong>，就會有一些已設定好的功能方便使用。</p><img src="/Blog/2017/09/12/dotnet-core系列文章二：VSCode教學/CtrlShiftP.gif" alt="[Execute_Command]" title="[Execute_Command]"><h4 id="下方區塊"><a href="#下方區塊" class="headerlink" title="下方區塊"></a>下方區塊</h4><p>錯誤提示訊息視窗<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Ctrl+Shift+M</div></pre></td></tr></table></figure></p><p>執行結果顯示訊息視窗<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Ctrl+Shift+U</div></pre></td></tr></table></figure></p><p>Debug結果顯示訊息視窗<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Ctrl+Shift+Y</div></pre></td></tr></table></figure></p><p>Terminal視窗<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//原生</div><div class="line">Ctrl+`</div><div class="line">//筆者設定</div><div class="line">Ctrl+Shift+/</div></pre></td></tr></table></figure></p><p>這個下方區塊的各個視窗，快捷鍵就沒相關的記憶點，多按幾次就會記下來了，通常比較常用的是<code>Ctrl+</code> `。因為筆者發現，若外面有開啟Terminal視窗，按下該快捷鍵Focus於外面的Termial視窗，滿困擾筆者的，因此筆者有特地調整該快捷鍵，調整步驟如下：</p><ul><li>按下<code>Ctrl+Shift+P</code></li><li>搜尋<strong>Keyboard</strong></li><li>選擇<strong>Open Keyboard ShortCuts</strong></li><li>在搜尋方塊中搜尋<strong>ToggleIntegratedTerminal</strong></li><li>點擊最左側的一枝筆圖示</li><li>按下你想要設定的快捷鍵後按下<code>Enter</code></li></ul><blockquote><p>這邊要提點一下，可以先反查自己欲設定的快捷鍵是否已經有設定過(配合<strong>When</strong>的使用情境)，最好是不要設定重複快捷鍵。</p></blockquote><p>對於最常用到的<strong>Terminal</strong>視窗部份，筆者要再補充一些需注意使用情境。筆者在寫code時，焦點會在Editor編輯視窗，這時想切換至Terminal視窗下指令時，很自然地按下<code>Ctrl+Shift+/</code>。若<strong>Terminal</strong>視窗是開啟狀態下，效果會是關閉Terminal視窗，沒有達到直接可以打指令的狀況。</p><p>想要解決這個情況，必須去<strong>Keyboard ShortCuts</strong>設定中，針對<strong>FocusTerminal</strong>去設定想要的快捷鍵，筆者目前使用<code>Shift+Alt+/</code>，以下提供筆者的使用情境配置習慣。</p><div class="alert info"><p>只要想使用指令列服務，請按下<strong>FocusTeminal</strong>設定快捷鍵，想要將Terminal視窗關閉，則按下<strong>ToggleIntegratedTerminal</strong>設定快捷鍵</p></div><h2 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h2><hr><p>介紹了這麼多VSCode的實用功能，這篇還僅介紹VSCode原生有的功能，尚未加入外掛部份；無論開發哪種語言，找尋適當的外掛配合原生諸多便利功能，筆者相信寫起程式來，應該是得心應手。下篇會整理dotnet core開發相關外掛介紹。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前提情要&quot;&gt;&lt;a href=&quot;#前提情要&quot; class=&quot;headerlink&quot; title=&quot;前提情要&quot;&gt;&lt;/a&gt;前提情要&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;上一篇講到開發dotnet core相關程式，論語說「工欲善其事，必先利其器」，相當然爾，熟悉開發工具這件事情直接影響你的開發產能。因筆者現況，公司配的桌機跟自己的筆電配備上有落差，以不耗系統資源的考量下，下定決心將「Visual Studio Code」作為首選開發工具。&lt;/p&gt;
    
    </summary>
    
      <category term="dotnet core" scheme="http://eugenesu0515.github.io/categories/dotnet-core/"/>
    
    
      <category term="dotnet core" scheme="http://eugenesu0515.github.io/tags/dotnet-core/"/>
    
      <category term="vscode" scheme="http://eugenesu0515.github.io/tags/vscode/"/>
    
  </entry>
  
  <entry>
    <title>dotnet-core系列文章一：安裝</title>
    <link href="http://eugenesu0515.github.io/2017/09/11/dotnet-core%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0%E4%B8%80%EF%BC%9A%E5%AE%89%E8%A3%9D/"/>
    <id>http://eugenesu0515.github.io/2017/09/11/dotnet-core系列文章一：安裝/</id>
    <published>2017-09-11T11:12:17.000Z</published>
    <updated>2017-09-17T14:40:34.705Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前提情要"><a href="#前提情要" class="headerlink" title="前提情要"></a>前提情要</h2><hr><p>目前微軟於「2017/08/14」正式發佈dotnet core2.0.0後，實作API數比版本1足足多了兩倍之多，是該進場的時候了。</p><p>身為ASP.NET開發者，以往都會限制於IIS Web Server才能架站，dotnet core本身跨平台的特性，且宿主不限制於IIS Web Server，加上僅開啟Visual Studio Code就可開發C#相關程式(設備配備不好的情況下超適用)，上述種種因素，是該投資時間研究dotnet core的時候了。</p><a id="more"></a><h2 id="內容"><a href="#內容" class="headerlink" title="內容"></a>內容</h2><hr><p>首先，需至Microsoft Download網站下載SDK。</p><p><a href="https://www.microsoft.com/net/core" target="_blank" rel="external">dotnet core SDK</a></p><p>安裝完畢後，請打開Command line輸入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">dotnet --version</div></pre></td></tr></table></figure></p><p>測試是否正常執行，若安裝成功，會回傳<code>2.0.0</code></p><p>目前官方預設範本有</p><ul><li>Console Application</li><li>ASP.NET Core MVC</li><li>ASP.NET Core WebAPI</li><li>其他</li></ul><p>詳細範本種類可參考<a href="https://docs.microsoft.com/zh-tw/dotnet/core/tools/dotnet-new" target="_blank" rel="external">dotnet core cli-new命令</a></p><p>接著，我們來建一個實際的專案，使用console範本作示範。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">dotnet new console -o helloworldapp</div></pre></td></tr></table></figure><p>上述指令中，最後結為尾為「專案名稱」，其中<code>-o</code>表示自動以「專案名稱」建立資料夾。</p><p>建立完成後，參考以下指令來執行程式碼<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//進入該資料夾</div><div class="line">cd helloworldapp</div><div class="line">//執行程式</div><div class="line">dotnet run</div></pre></td></tr></table></figure></p><p>就可以看到以下執行結果，參考</p><img src="/Blog/2017/09/11/dotnet-core系列文章一：安裝/dotnet_core_new_console_run.jpg" alt="[dotnet_run]" title="[dotnet_run]"><h2 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h2><hr><p>dotnet core環境安裝上簡單，dotnet cli的很直覺的操作性，整體來說，本身是寫.net framework相關程式則不會有什麼學習上的障礙，那你還等什麼呢？</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前提情要&quot;&gt;&lt;a href=&quot;#前提情要&quot; class=&quot;headerlink&quot; title=&quot;前提情要&quot;&gt;&lt;/a&gt;前提情要&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;目前微軟於「2017/08/14」正式發佈dotnet core2.0.0後，實作API數比版本1足足多了兩倍之多，是該進場的時候了。&lt;/p&gt;
&lt;p&gt;身為ASP.NET開發者，以往都會限制於IIS Web Server才能架站，dotnet core本身跨平台的特性，且宿主不限制於IIS Web Server，加上僅開啟Visual Studio Code就可開發C#相關程式(設備配備不好的情況下超適用)，上述種種因素，是該投資時間研究dotnet core的時候了。&lt;/p&gt;
    
    </summary>
    
      <category term="dotnet core" scheme="http://eugenesu0515.github.io/categories/dotnet-core/"/>
    
    
      <category term="dotnet core" scheme="http://eugenesu0515.github.io/tags/dotnet-core/"/>
    
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Eugene Su</title>
  
  
  <link href="/Blog/atom.xml" rel="self"/>
  
  <link href="http://eugenesu0515.github.io/"/>
  <updated>2018-04-26T09:28:37.867Z</updated>
  <id>http://eugenesu0515.github.io/</id>
  
  <author>
    <name>Eugene Su</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Vue系列文章二：VueWepackTemplate檔案結構介紹</title>
    <link href="http://eugenesu0515.github.io/2018/04/25/Vue%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0%E4%BA%8C%EF%BC%9AVueWepackTemplate%E6%AA%94%E6%A1%88%E7%B5%90%E6%A7%8B%E4%BB%8B%E7%B4%B9/"/>
    <id>http://eugenesu0515.github.io/2018/04/25/Vue系列文章二：VueWepackTemplate檔案結構介紹/</id>
    <published>2018-04-25T05:09:37.000Z</published>
    <updated>2018-04-26T09:28:37.867Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前提情要"><a href="#前提情要" class="headerlink" title="前提情要"></a>前提情要</h2><hr><p>上一篇介紹到<code>vue-cli</code>建立vue application，其中筆者示範選擇以<code>webpack template</code>作為預設專案結構。這一篇就來簡單介紹一下專案中的檔案結構以及經驗分享。</p><a id="more"></a><h2 id="內容"><a href="#內容" class="headerlink" title="內容"></a>內容</h2><hr><p>先來貼一張vscode開啟後檔案結構：</p><img src="/Blog/2018/04/25/Vue系列文章二：VueWepackTemplate檔案結構介紹/vue_test_app_file.jpg" alt="[vue_test_app_file]" title="[vue_test_app_file]"><p>以下解釋一下每個資料夾的用意，詳細參考 <a href="http://vuejs-templates.github.io/webpack" target="_blank" rel="external">vue webpack template document</a>，內容就以筆者到目前為止更改過的設定去做說明。</p><h3 id="build"><a href="#build" class="headerlink" title="build"></a><strong>build</strong></h3><p>顧名思義，建置相關設定是在這目錄中的檔案設定，主要是<code>hot loader</code>及打包壓縮相關設定。此目錄中會調整到的檔案屬<code>webpack</code>開頭之檔案，還可為dev及prod做特別不同的設定。</p><p>若你是與筆者一樣是使用bootstrap作為網站切版基底則，且已經有<code>UI/UX</code>提供jquery效果則需要多加一些設定。設定步驟為</p><ul><li><code>npm install</code>方式安裝jquery、popperjs及bootstrap</li><li>在<code>webpack.base.conf.js</code>加<code>plugins</code>相關設定</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// const宣告區塊中增加</span></div><div class="line"><span class="comment">// 載入webpack</span></div><div class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>)</div></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// module.exports中增加plugins option</span></div><div class="line">plugins:[</div><div class="line">    <span class="keyword">new</span> webpack.ProvidePlugin(&#123;</div><div class="line">        $: <span class="string">'jquery'</span>,</div><div class="line">        jQuery: <span class="string">'jquery'</span>,</div><div class="line">        <span class="string">'window.jQuery'</span>: <span class="string">'jquery'</span>,</div><div class="line">        Popper: [<span class="string">'popper.js'</span>, <span class="string">'default'</span>]</div><div class="line">    &#125;)</div><div class="line">]</div></pre></td></tr></table></figure><div class="alert danger no-icon"><p>切記：套用bootstrap4需安裝popperjs</p></div><p>上述設定完畢後，我們就直接在vue進入點<code>App.vue</code>的<code>script</code>區塊中import jquery以及<code>mounted</code>事件中把<code>UI/UX</code>提供的jquery code貼上去就大功告成。不方便在此直接秀公司的公版套用過程，先以敘述帶過，我再找時間補一篇套用<a href="https://startbootstrap.com/template-overviews/sb-admin-2/" target="_blank" rel="external">sbadmin2</a>的完整過程，比較會有感同身受。</p><h3 id="config"><a href="#config" class="headerlink" title="config"></a><strong>config</strong></h3><p>專案環境變數相關設定，基本上就是在程式撰寫中依照development及prodution不同而變動的資料可以再此目錄中設定。</p><ul><li>index.js<br>預設會有兩種環境設定，<code>dev</code>及<code>prod(build)</code>，因此<code>npm run dev</code>時使用的port可於此設定以及<code>cors</code>問題可用<code>proxyTable</code>的方式解決，參考<a href="https://kuro.tw/posts/2017/06/07/%E5%A6%82%E4%BD%95%E5%9C%A8-Vue-CLI-%E5%BB%BA%E7%AB%8B%E7%9A%84%E9%96%8B%E7%99%BC%E7%92%B0%E5%A2%83%E5%91%BC%E5%8F%AB%E8%B7%A8%E5%9F%9F%E9%81%A0%E7%AB%AF-RESTful-APIs/" target="_blank" rel="external">呼叫跨網域API解決方式</a>，筆者開發到目前為止，只改過這兩個設定，其他設定皆採用預設值。</li><li>dev.env.js、prod.env.js<br>這兩個檔案中會建立同樣的key值不同value，透過跑<code>npm run dev/build</code>方式以不同的設定值去取代，舉個例子會比較好理解，在開發端及正式伺服器上呼叫的api網址會有所不一樣，這時就可以在這設定。</li></ul><figure class="codeblock codeblock--tabbed"><figcaption><span>env.js</span><ul class="tabs"><li class="tab active">dev</li><li class="tab">prod</li></ul></figcaption><div class="tabs-content"><figure class="highlight plain" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">API_BASE_URL: '"http://localhost:5000/api"'</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain" style="display: none;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">API_BASE_URL: '"http://serverip:5000/api"'</span><br></pre></td></tr></tbody></table></figure></div></figure><div class="alert danger no-icon"><p>設定值需要按照格式，一定要使用一組單引號中有雙引號的方式<code>&#39;&quot;&quot;&#39;</code></p></div><p>在vue程式中使用方式為<code>process.env.key</code>，以上述例子來說宣告為</p><blockquote><p>process.env.API_BASE_URL</p></blockquote><div class="alert danger no-icon"><p>需要注意的是設定完成後，需要重跑一次<code>npm run dev/build</code>才會生效</p></div><h3 id="node-modules"><a href="#node-modules" class="headerlink" title="node_modules"></a><strong>node_modules</strong></h3><p>安裝的套件皆在此目錄中。這目錄就不多加敘述。不過有時引用vue套件的話，透過觀看該套件的原始碼，也可以偷學到一些vue撰寫招數，也是滿有收穫的，不過就要先有基本概念再去參考，以免一開始就學到偷吃步的招數而走歪。</p><h3 id="src"><a href="#src" class="headerlink" title="src"></a><strong>src</strong></h3><p>Vue程式在此目錄中撰寫。筆者目前就以功能面(模組)作為切分資料夾的依據存放Component，這就看各自的開發習慣作切割，以好找為主。</p><h3 id="static"><a href="#static" class="headerlink" title="static"></a><strong>static</strong></h3><p>若有些特殊頁面不與vue相關，需要獨立宣告的靜態檔案可放與此。筆者就有經驗，因在實作Single sign out功能，使用過<a href="http://identityserver.io/" target="_blank" rel="external">Identity Server4</a>，Vue前端專案當作client與Identity Server互動時就需要撰寫callback程式，就會需要宣告於此目錄中，參考 <a href="https://github.com/saitolabs/vuejs-oidc-client" target="_blank" rel="external">vuejs-oidc-client</a>。</p><h2 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h2><hr><p>此篇簡單的介紹一下<code>webpack</code>預設template產生之資料夾結構，若想要自己重頭設定起筆者推薦此篇 <a href="https://segmentfault.com/a/1190000005363030" target="_blank" rel="external">vue+webpack起手式</a>，筆者出社會後都以C#作為主要開發語言，加上開發產品功能還是要緊，就先使用預設範本下去開發。不過還是要先看過這兩篇</p><ul><li><a href="http://vuejs-templates.github.io/webpack" target="_blank" rel="external">vue webpack template document</a></li><li><a href="https://segmentfault.com/a/1190000005363030" target="_blank" rel="external">vue+webpack起手式</a></li></ul><p>才會有概念，到時遇到問題時就會知道要在<a href="www.google.com">google</a>下甚麼關鍵字了。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前提情要&quot;&gt;&lt;a href=&quot;#前提情要&quot; class=&quot;headerlink&quot; title=&quot;前提情要&quot;&gt;&lt;/a&gt;前提情要&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;上一篇介紹到&lt;code&gt;vue-cli&lt;/code&gt;建立vue application，其中筆者示範選擇以&lt;code&gt;webpack template&lt;/code&gt;作為預設專案結構。這一篇就來簡單介紹一下專案中的檔案結構以及經驗分享。&lt;/p&gt;
    
    </summary>
    
      <category term="vue" scheme="http://eugenesu0515.github.io/categories/vue/"/>
    
    
      <category term="vue" scheme="http://eugenesu0515.github.io/tags/vue/"/>
    
      <category term="webpack" scheme="http://eugenesu0515.github.io/tags/webpack/"/>
    
      <category term="vue-cli" scheme="http://eugenesu0515.github.io/tags/vue-cli/"/>
    
  </entry>
  
  <entry>
    <title>Vue系列文章一：Vue簡介</title>
    <link href="http://eugenesu0515.github.io/2018/04/23/Vue%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0%E4%B8%80%EF%BC%9AVue%E7%B0%A1%E4%BB%8B/"/>
    <id>http://eugenesu0515.github.io/2018/04/23/Vue系列文章一：Vue簡介/</id>
    <published>2018-04-23T10:56:34.000Z</published>
    <updated>2018-04-25T03:52:42.038Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前提情要"><a href="#前提情要" class="headerlink" title="前提情要"></a>前提情要</h2><hr><p>目前公司開發產品選擇<a href="https://vuefe.cn/v2/guide/" target="_blank" rel="external">vue.js</a>作為前端開發框架，選擇原因不外呼是</p><ul><li>容易上手</li><li>考量到產品之後會由大陸團隊接手</li><li>Virtual Dom設計，效能方面不需要擔心</li></ul><a id="more"></a><h2 id="內容"><a href="#內容" class="headerlink" title="內容"></a>內容</h2><hr><p>產品開發之路是遙遠的路途，就決定好好研究它吧，起手式當然是要來寫一支<code>Hello World</code>程式。</p><p>Vue的好處之一是若舊網站某些頁面很吃重前端效果則可考慮在該頁單獨使用它，可以感受model雙向綁定帶來的好處。這種方式只要將vue檔案載入就可以開始使用vue了。</p><h3 id="使用vue方式一"><a href="#使用vue方式一" class="headerlink" title="使用vue方式一"></a>使用vue方式一</h3><blockquote><p>載入vue.js檔案即可在頁面使用vue</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- body區塊結尾前宣告 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure><p>載入完畢後，來初始化吧</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// script區塊中宣告</span></div><div class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</div><div class="line">  el: <span class="string">'#app'</span>,<span class="comment">//作用域</span></div><div class="line">  data: &#123;</div><div class="line">    message: <span class="string">'Hello Vue!'</span></div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure><p>最後套用於body區塊中，在任意<code>div</code>中套用id為app，在該範圍中vue就生效了。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- body區塊中宣告 --&gt;</span></div><div class="line"><span class="comment">&lt;!--對應作用域選取元素--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">  &#123;&#123; message &#125;&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><p>完整html檔案如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Test Vue<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">      &#123;&#123;message&#125;&#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">        <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></div><div class="line"><span class="javascript">            el: <span class="string">'#app'</span>, <span class="comment">//作用域</span></span></div><div class="line"><span class="undefined">            data: &#123;</span></div><div class="line"><span class="javascript">                message: <span class="string">'Hello Vue!'</span></span></div><div class="line"><span class="undefined">            &#125;</span></div><div class="line"><span class="undefined">        &#125;)</span></div><div class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure><h3 id="使用vue方式二"><a href="#使用vue方式二" class="headerlink" title="使用vue方式二"></a>使用vue方式二</h3><blockquote><p>利用vue-cli建立完整的前端專案</p></blockquote><p>首先要先提到vue-cli工具，可透過<a href="https://www.npmjs.com/" target="_blank" rel="external">npm</a>進行安裝，指令如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g vue-cli</div></pre></td></tr></table></figure><p>使用<code>vue --version</code>來確認是否安裝成功，若出現版號，恭喜你成功了(筆者這邊環境是會出現<code>2.8.2</code>)。我們可以使用<code>vue help</code>來觀看一下支援哪些command吧。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">λ  vue help</div><div class="line"></div><div class="line">  Usage: vue &lt;command&gt; [options]</div><div class="line"></div><div class="line"></div><div class="line">  Options:</div><div class="line"></div><div class="line">    -V, --version  output the version number</div><div class="line">    -h, --help     output usage information</div><div class="line"></div><div class="line"></div><div class="line">  Commands:</div><div class="line"></div><div class="line">    init        generate a new project from a template</div><div class="line">    list        list available official templates</div><div class="line">    build       prototype a new project</div><div class="line">    help [cmd]  display help for [cmd]</div></pre></td></tr></table></figure><p>我們等等建立vue application時會使用到<code>list</code> <code>init</code>指令來完成。</p><p>首先先使用<code>vue list</code>觀看一下有哪些現成template可使用，參考如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">λ  vue list</div><div class="line"></div><div class="line">  Available official templates:</div><div class="line"></div><div class="line">  ★  browserify - A full-featured Browserify + vueify setup with hot-reload, linting &amp; unit testing.</div><div class="line">  ★  browserify-simple - A simple Browserify + vueify setup for quick prototyping.</div><div class="line">  ★  pwa - PWA template for vue-cli based on the webpack template</div><div class="line">  ★  simple - The simplest possible Vue setup in a single HTML file</div><div class="line">  ★  webpack - A full-featured Webpack + vue-loader setup with hot reload, linting, testing &amp; css extraction.</div><div class="line">  ★  webpack-simple - A simple Webpack + vue-loader setup for quick prototyping.</div></pre></td></tr></table></figure><p>若使用vue撰寫純前端的application則建議直衝webpack(full)，主要支援<code>hot reload</code>，亦可選擇並設定好<code>router</code>相關設定。跟著筆者一起建立vue application吧。</p><blockquote><p>使用<code>init</code>初始化專案，<code>webpack</code>關鍵字為選擇vue-cli提供之webpack template，最後名稱是專案名稱，使用<code>VueTestApp</code>。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vue init webpack VueTestApp</div></pre></td></tr></table></figure><p>執行步驟為</p><ul><li>進入到專案資料夾</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cd VueTestApp</div></pre></td></tr></table></figure><ul><li>安裝npm套件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install</div></pre></td></tr></table></figure><ul><li><code>npm run</code>方式執行Application</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm run dev</div></pre></td></tr></table></figure><p>瀏覽<code>http://localhost:8080</code>，看到以下畫面，那就再次恭喜你了，達成成功撰寫vue application成就。</p><img src="/Blog/2018/04/23/Vue系列文章一：Vue簡介/vue_app.jpg" alt="[vue_app]" title="[vue_app]"><h2 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h2><hr><p>看完內容中的教學，應該可以感受到建置vue application並不困難，簡單幾個步驟即可開始撰寫，選vue準沒錯。</p><p>最後筆者期許自己能夠寫完一系列的教學文，下一篇要來介紹一下webpack template建立之資料夾結構及各檔案的說明。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前提情要&quot;&gt;&lt;a href=&quot;#前提情要&quot; class=&quot;headerlink&quot; title=&quot;前提情要&quot;&gt;&lt;/a&gt;前提情要&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;目前公司開發產品選擇&lt;a href=&quot;https://vuefe.cn/v2/guide/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;vue.js&lt;/a&gt;作為前端開發框架，選擇原因不外呼是&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;容易上手&lt;/li&gt;
&lt;li&gt;考量到產品之後會由大陸團隊接手&lt;/li&gt;
&lt;li&gt;Virtual Dom設計，效能方面不需要擔心&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="vue" scheme="http://eugenesu0515.github.io/categories/vue/"/>
    
    
      <category term="vue" scheme="http://eugenesu0515.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>VSCode技巧：檔案比對差異</title>
    <link href="http://eugenesu0515.github.io/2018/04/23/VSCode%E6%8A%80%E5%B7%A7%EF%BC%9A%E6%AA%94%E6%A1%88%E6%AF%94%E5%B0%8D%E5%B7%AE%E7%95%B0/"/>
    <id>http://eugenesu0515.github.io/2018/04/23/VSCode技巧：檔案比對差異/</id>
    <published>2018-04-23T00:45:08.000Z</published>
    <updated>2018-04-23T11:02:44.122Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前提情要"><a href="#前提情要" class="headerlink" title="前提情要"></a>前提情要</h2><hr><p>多人開發的專案，最容易發生的衝突是設定檔案，如Vue專案中<code>router/index.js</code>，每個人的各自component需要import與設定其url，筆者公司採用<a href="https://subversion.apache.org/" target="_blank" rel="external">svn</a>作為版空工具，在各自處理衝突的情況下，該檔案真的是不堪入目。</p><p>時間一久，可能連routing功能都會被影響到，因檔案亂掉的關係，有些url失效或者設定階層不對，連Layout都長不出來，給客戶測試前，是必須整理一下了。</p><p>因有layout關係，必須將其他component所屬url必須放置於layout的children設定中，有些人沒有仔細看就直接將設定寫在layout同層，有些url還被設定到兩次，太氣了，讓筆者murmur一下。</p><a id="more"></a><h2 id="內容"><a href="#內容" class="headerlink" title="內容"></a>內容</h2><hr><p>所以筆者就把layout同層的剪下後貼到另一支新開的檔案中，想要與原檔案比對的方式，把重複的整理一下並塞回正常的設定階層中。有上網找一下檔案比對的工具，例如：<a href="https://free.com.tw/diffchecker/" target="_blank" rel="external">diffchecker</a>，但總覺得不想離開vscode去操作其他軟體阿，索性搜索一下vscode是否具備檔案比對功能，太神拉，還真的有。</p><p>我們就以vue預設webpack template中的router/index.js為例，再新增一個檔案，將原本的貼上後多一個數字2。</p><ul><li>第一步驟需在欲比對的新檔案上按右鍵選擇<code>Select for compare</code></li></ul><img src="/Blog/2018/04/23/VSCode技巧：檔案比對差異/SelectForCompare.jpg" alt="[SelectForCompare]" title="[SelectForCompare]"><ul><li>第二步驟則在欲比對的原始檔案上按右鍵選擇<code>Compare with Selected</code></li></ul><img src="/Blog/2018/04/23/VSCode技巧：檔案比對差異/CompareWithSelected.jpg" alt="[CompareWithSelected]" title="[CompareWithSelected]"><ul><li>比對成就達成</li></ul><img src="/Blog/2018/04/23/VSCode技巧：檔案比對差異/CompareResult.jpg" alt="[CompareWithSelected]" title="[CompareWithSelected]"><h2 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h2><hr><p>當然上述例子應該透過改善程式上版流程且遇到衝突時應該就要被解決，千萬不要學筆者積了一堆route設定後才來調，心臟要很大顆阿。</p><p>使用vscode來比對檔案，有一種熟悉的感覺-版空中的解決衝突的畫面，對於有版空習慣的程式撰寫者來說，應該是很容易看出不一樣的地方，非常推薦給大家。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前提情要&quot;&gt;&lt;a href=&quot;#前提情要&quot; class=&quot;headerlink&quot; title=&quot;前提情要&quot;&gt;&lt;/a&gt;前提情要&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;多人開發的專案，最容易發生的衝突是設定檔案，如Vue專案中&lt;code&gt;router/index.js&lt;/code&gt;，每個人的各自component需要import與設定其url，筆者公司採用&lt;a href=&quot;https://subversion.apache.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;svn&lt;/a&gt;作為版空工具，在各自處理衝突的情況下，該檔案真的是不堪入目。&lt;/p&gt;
&lt;p&gt;時間一久，可能連routing功能都會被影響到，因檔案亂掉的關係，有些url失效或者設定階層不對，連Layout都長不出來，給客戶測試前，是必須整理一下了。&lt;/p&gt;
&lt;p&gt;因有layout關係，必須將其他component所屬url必須放置於layout的children設定中，有些人沒有仔細看就直接將設定寫在layout同層，有些url還被設定到兩次，太氣了，讓筆者murmur一下。&lt;/p&gt;
    
    </summary>
    
      <category term="vscode" scheme="http://eugenesu0515.github.io/categories/vscode/"/>
    
    
      <category term="vscode" scheme="http://eugenesu0515.github.io/tags/vscode/"/>
    
      <category term="compare file" scheme="http://eugenesu0515.github.io/tags/compare-file/"/>
    
  </entry>
  
  <entry>
    <title>VSCode技巧：vue開發套件vetur相關設定</title>
    <link href="http://eugenesu0515.github.io/2018/04/21/VSCode%E6%8A%80%E5%B7%A7%EF%BC%9Avue%E9%96%8B%E7%99%BC%E5%A5%97%E4%BB%B6vetur%E7%9B%B8%E9%97%9C%E8%A8%AD%E5%AE%9A/"/>
    <id>http://eugenesu0515.github.io/2018/04/21/VSCode技巧：vue開發套件vetur相關設定/</id>
    <published>2018-04-21T13:33:38.000Z</published>
    <updated>2018-04-23T03:05:58.339Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前提情要"><a href="#前提情要" class="headerlink" title="前提情要"></a>前提情要</h2><hr><p>目前專案選擇<a href="https://vuejs.org/" target="_blank" rel="external">vue.js</a>作為前端開發使用Framework，開發工具選擇VsCode的狀況下，筆者搜尋一下相關plugins，發現<a href="https://github.com/vuejs/vetur" target="_blank" rel="external">vetur</a>下載率很高，含基本的</p><ul><li><code>syntax highlighting</code> </li><li><code>Snippet</code> </li><li><code>Auto Completion</code></li></ul><p>對筆者來說已足夠，趕緊下載來試用。稍微觀看一下該套件格式化相關設定，對於vue webpack template開發來說，需要再手動設定。</p><a id="more"></a><h2 id="內容"><a href="#內容" class="headerlink" title="內容"></a>內容</h2><hr><p>若以vue-cli產生之template開發則會以獨立vue檔案的形式開發，vetur在格式化預設設定中不包含html部份，參考 <a href="https://github.com/vuejs/vetur/blob/master/docs/formatting.md" target="_blank" rel="external">https://github.com/vuejs/vetur/blob/master/docs/formatting.md</a></p><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"vetur.format.defaultFormatter.html"</span>: <span class="string">"none"</span>,</div><div class="line">  <span class="attr">"vetur.format.defaultFormatter.css"</span>: <span class="string">"prettier"</span>,</div><div class="line">  <span class="attr">"vetur.format.defaultFormatter.postcss"</span>: <span class="string">"prettier"</span>,</div><div class="line">  <span class="attr">"vetur.format.defaultFormatter.scss"</span>: <span class="string">"prettier"</span>,</div><div class="line">  <span class="attr">"vetur.format.defaultFormatter.less"</span>: <span class="string">"prettier"</span>,</div><div class="line">  <span class="attr">"vetur.format.defaultFormatter.stylus"</span>: <span class="string">"stylus-supremacy"</span>,</div><div class="line">  <span class="attr">"vetur.format.defaultFormatter.js"</span>: <span class="string">"prettier"</span>,</div><div class="line">  <span class="attr">"vetur.format.defaultFormatter.ts"</span>: <span class="string">"prettier"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>因此我們就針對html來做設定，<code>Ctrl+,</code>叫出Vscode的UserSettings，可設定為<code>prettier</code>:<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">"vetur.format.defaultFormatter.html": "prettier",</div></pre></td></tr></table></figure></p><p>也可以將其設定為<code>js-beautify-html</code>，請填入以下設定：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">"vetur.format.defaultFormatter.html": "js-beautify-html",</div><div class="line">"vetur.format.defaultFormatterOptions": &#123;</div><div class="line">    "js-beautify-html": &#123;</div><div class="line">        "wrap_attributes": "force-aligned"</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h2><hr><p>設定成功後，可以按下<code>Alt + Shift + F</code>來格式化vue檔案了，效果如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://vuejs.org"</span></span></div><div class="line"><span class="tag">        <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span></div><div class="line">        Core Docs</div><div class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://forum.vuejs.org"</span></span></div><div class="line"><span class="tag">        <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span></div><div class="line">        Forum</div><div class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前提情要&quot;&gt;&lt;a href=&quot;#前提情要&quot; class=&quot;headerlink&quot; title=&quot;前提情要&quot;&gt;&lt;/a&gt;前提情要&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;目前專案選擇&lt;a href=&quot;https://vuejs.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;vue.js&lt;/a&gt;作為前端開發使用Framework，開發工具選擇VsCode的狀況下，筆者搜尋一下相關plugins，發現&lt;a href=&quot;https://github.com/vuejs/vetur&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;vetur&lt;/a&gt;下載率很高，含基本的&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;syntax highlighting&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;&lt;code&gt;Snippet&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;&lt;code&gt;Auto Completion&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;對筆者來說已足夠，趕緊下載來試用。稍微觀看一下該套件格式化相關設定，對於vue webpack template開發來說，需要再手動設定。&lt;/p&gt;
    
    </summary>
    
      <category term="vscode" scheme="http://eugenesu0515.github.io/categories/vscode/"/>
    
    
      <category term="vscode" scheme="http://eugenesu0515.github.io/tags/vscode/"/>
    
      <category term="vue" scheme="http://eugenesu0515.github.io/tags/vue/"/>
    
      <category term="vetur" scheme="http://eugenesu0515.github.io/tags/vetur/"/>
    
  </entry>
  
  <entry>
    <title>VSCode技巧：解決RazorView中Emmet失效問題</title>
    <link href="http://eugenesu0515.github.io/2017/09/16/VSCode%E6%8A%80%E5%B7%A7%EF%BC%9A%E8%A7%A3%E6%B1%BARazorView%E4%B8%ADEmmet%E5%A4%B1%E6%95%88%E5%95%8F%E9%A1%8C/"/>
    <id>http://eugenesu0515.github.io/2017/09/16/VSCode技巧：解決RazorView中Emmet失效問題/</id>
    <published>2017-09-16T13:44:40.000Z</published>
    <updated>2017-09-18T06:52:29.303Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前提情要"><a href="#前提情要" class="headerlink" title="前提情要"></a>前提情要</h2><hr><p>身為Web及.net MVC開發者來說，多多少少會有機會寫到Razor View。筆者因工作上曾擔任過SA一陣子，工作內容包含劃Prototype頁面與客戶溝通作業流程及操作方式，當時案子套版基底是使用<a href="https://getbootstrap.com/docs/3.3/" target="_blank" rel="external">Bootstrap3</a>，知道需要長時間使用Bootstrap，因此筆者有下功夫熟悉它的css class。且那時有幸已知道<strong>ZenCoding</strong>(Emmet)這玩意，詳細可參考 <a href="http://blog.kkbruce.net/2012/11/zen-coding-extremely-speed-write-your-html5-css3-code.html#.Wb0uksgjGUk" target="_blank" rel="external">ZEN-CODING - 教你極速撰寫HTML5與CSS3程式碼</a>(筆者當年就被這篇文章燒到)。</p><a id="more"></a><p>再者VSCode編輯器本身早在第一版出來時就內建Zen Coding(Emmet)功能了，筆者在熟悉Bootstrap css class的背景及VSCode的Emmet支援下撰寫Prototype頁面，著實無往不利；有時還在與客戶溝通當下，都能直接快速調整靜態頁面。</p><p>筆者因最近在碰dotnet core2.0，試著撰寫ASP.NET Core MVC專案，直接使用內建範本撰寫時發現，在cshtml頁面上Zen Coding整個失效阿，對習慣使用Zen Coding的筆者來說滿崩潰的。這時要感謝一下Google的存在，馬上就找到解答了，以更改設定方式將Zen Coding效果重現於cshtml類型檔案中。</p><h2 id="內容"><a href="#內容" class="headerlink" title="內容"></a>內容</h2><hr><p>VSCode之所以有彈性的地方在於可依使用者喜好覆蓋原始設定，講更改設定前，需解釋一下Workspace及User Setting的不同。分法其實非常簡單，若該設定只作用於目前專案中，使用<strong>WorkspaceSetting</strong>去複寫設定，若全域套用設定則使用<strong>UserSetting</strong>的方式調整。</p><blockquote><p>作用域為專案則<strong>WorkspaceSetting</strong>，全域則<strong>UserSetting</strong></p></blockquote><p>上述設定各位可以使用<code>Ctrl+Shift+P</code>鍵出關鍵字能很容易搜尋到，視窗會分為兩邊，左邊為「VSCode原始設定」，右邊為「使用者複寫設定」，皆為json格式宣告，各個設定詳細解釋可參考 <a href="https://code.visualstudio.com/docs/getstarted/settings" target="_blank" rel="external">VSCode/Docs/Setting</a>。</p><p>筆者選擇UserSetting，希望每個MVC專案的View都有Emmet效果，且不用每個專案個別設定，設定如下</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">"emmet.includeLanguages": &#123;</div><div class="line">        "cshtml":"html"</div><div class="line">      &#125;,</div><div class="line">"files.associations": &#123;"*.cshtml":"html"&#125;</div></pre></td></tr></table></figure><p>第一條是設定language mapping，第二條則是副檔名為cshtml的當作html語法檔案。詳細說明參考<a href="https://code.visualstudio.com/docs/getstarted/settings" target="_blank" rel="external">VSCode/Docs/Setting</a>及<a href="https://code.visualstudio.com/docs/editor/emmet" target="_blank" rel="external">VSCode/Docs/Editor/Emmet</a>。</p><p>直接來看一下設定後的效果吧。<br><img src="/Blog/2017/09/16/VSCode技巧：解決RazorView中Emmet失效問題/CshtmlEmmet.gif" alt="[cshtml_emmet]" title="[cshtml_emmet]"></p><p>Zen Coding的技巧部份就不多加敘述，可閱讀第一段所列的部落格文章，參考其對應語法，筆者覺得只要熟悉並善用</p><ul><li>#</li><li>.</li><li>[]</li><li>&gt;</li><li>*</li></ul><p>五種的用法，足夠大家發揮出Zen Coding最大效益，其餘的用到時再查並熟悉即可。</p><h2 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h2><hr><p>雖此篇是講解以複寫設定方式解決Razor View頁面中可出現Zen Coding效果議題，但容許筆者在最後強力推薦給大家熟悉Zen Coding的好處，只要多加利用這種可快速產生html語法，身為後端工程師，在拿到設計切好的版後，以Zen Coding的角度思考並快速產生對應的Html，肯定能達到事半功倍效果， 有更多多餘時間去架構並撰寫其餘程式碼，光這點已足夠證明投資時間於Zen Coding熟悉上是值得的。</p><p>參考</p><ul><li><a href="https://segmentfault.com/q/1010000010832948" target="_blank" rel="external">https://segmentfault.com/q/1010000010832948</a></li><li><a href="https://code.visualstudio.com/docs/editor/emmet" target="_blank" rel="external">https://code.visualstudio.com/docs/editor/emmet</a></li><li><a href="http://blog.kkbruce.net/2012/11/zen-coding-extremely-speed-write-your-html5-css3-code.html#.Wb0uksgjGUk" target="_blank" rel="external">http://blog.kkbruce.net/2012/11/zen-coding-extremely-speed-write-your-html5-css3-code.html#.Wb0uksgjGUk</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前提情要&quot;&gt;&lt;a href=&quot;#前提情要&quot; class=&quot;headerlink&quot; title=&quot;前提情要&quot;&gt;&lt;/a&gt;前提情要&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;身為Web及.net MVC開發者來說，多多少少會有機會寫到Razor View。筆者因工作上曾擔任過SA一陣子，工作內容包含劃Prototype頁面與客戶溝通作業流程及操作方式，當時案子套版基底是使用&lt;a href=&quot;https://getbootstrap.com/docs/3.3/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Bootstrap3&lt;/a&gt;，知道需要長時間使用Bootstrap，因此筆者有下功夫熟悉它的css class。且那時有幸已知道&lt;strong&gt;ZenCoding&lt;/strong&gt;(Emmet)這玩意，詳細可參考 &lt;a href=&quot;http://blog.kkbruce.net/2012/11/zen-coding-extremely-speed-write-your-html5-css3-code.html#.Wb0uksgjGUk&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ZEN-CODING - 教你極速撰寫HTML5與CSS3程式碼&lt;/a&gt;(筆者當年就被這篇文章燒到)。&lt;/p&gt;
    
    </summary>
    
      <category term="vscode" scheme="http://eugenesu0515.github.io/categories/vscode/"/>
    
    
      <category term="vscode" scheme="http://eugenesu0515.github.io/tags/vscode/"/>
    
      <category term="Razor" scheme="http://eugenesu0515.github.io/tags/Razor/"/>
    
      <category term="Emmet" scheme="http://eugenesu0515.github.io/tags/Emmet/"/>
    
  </entry>
  
  <entry>
    <title>dotnet-core系列文章二：VSCode教學</title>
    <link href="http://eugenesu0515.github.io/2017/09/12/dotnet-core%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0%E4%BA%8C%EF%BC%9AVSCode%E6%95%99%E5%AD%B8/"/>
    <id>http://eugenesu0515.github.io/2017/09/12/dotnet-core系列文章二：VSCode教學/</id>
    <published>2017-09-12T00:11:27.000Z</published>
    <updated>2017-09-18T07:33:11.632Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前提情要"><a href="#前提情要" class="headerlink" title="前提情要"></a>前提情要</h2><hr><p>上一篇講到開發dotnet core相關程式，論語說「工欲善其事，必先利其器」，相當然爾，熟悉開發工具這件事情直接影響你的開發產能。因筆者現況，公司配的桌機跟自己的筆電配備上有落差，以不耗系統資源的考量下，下定決心將「Visual Studio Code」作為首選開發工具。</p><a id="more"></a><p>簡單敘述一下筆者這邊的環境</p><ul><li>VsCode：使用最新版本1.16.0</li><li>作業系統：Windows 10</li></ul><blockquote><p>以下示範內容皆為Windows環境下的快捷鍵及設定</p></blockquote><h2 id="內容"><a href="#內容" class="headerlink" title="內容"></a>內容</h2><hr><p>Visual Studio Code是<a href="https://electron.atom.io/" target="_blank" rel="external">Electron</a>建置而成，它基本上核心就是chrome v8引擎，可以想像成是在使用瀏覽器，接著筆者會以不同功能取向為分類準則，分門別類介紹目前使用上必須記得快捷鍵及小技巧。</p><h4 id="Tab操作"><a href="#Tab操作" class="headerlink" title="Tab操作"></a>Tab操作</h4><p>Tab操作與Chrome很像，基本Tab操作快捷鍵如</p><ul><li><code>Ctrl+Tab</code>:切換到最後編輯視窗，按住不動會跳出目前開啟中的檔案清單，可使用上、下鍵選擇欲切換的視窗</li><li><code>Ctrl+PgUp</code>:切換到下一個編輯視窗</li><li><code>Ctrl+PgDn</code>:切換到上一個編輯視窗</li><li><code>Ctrl+W</code>:關閉目前視窗</li></ul><img src="/Blog/2017/09/12/dotnet-core系列文章二：VSCode教學/CtrlTab_CtrlPgUp_CtrlPgDown.gif" alt="[ctrl_tab]" title="[ctrl_tab]"><p>不同的是無法使用<code>Ctrl+數字鍵</code>切換相對應數字的Tab，因VSCode有多個編輯區塊瀏覽相關用途；另Chrome上新增頁籤時使用<code>Ctrl+T</code>，對於VSCode來說是新增一個檔案，因此需習慣<code>Ctrl+N</code>熱鍵。</p><h4 id="左側欄"><a href="#左側欄" class="headerlink" title="左側欄"></a>左側欄</h4><p>左側欄由五個不同功能視窗組成，快捷鍵及對應視窗分別為</p><ul><li><code>Ctrl+Shift+E</code>檔案總管</li><li><code>Ctrl+Shift+F</code>搜尋</li><li><code>Ctrl+Shift+G</code>git</li><li><code>Ctrl+Shift+D</code>Debug</li><li><code>Ctrl+Shift+X</code>擴充套件</li></ul><p>這邊提供一個記憶的小技巧，以上共通點是都是有<code>Ctrl+Shift</code>，字母按鍵配合功能所屬英文單字記就會好記很多，例:<strong>E:Explorer</strong>，詳細參考</p><ul><li><strong>E</strong>:Explorer</li><li><strong>F</strong>:Find</li><li><strong>G</strong>:Git</li><li><strong>D</strong>:Debug</li><li><strong>X</strong>:Extension(這個稍微要變化一下，因為已經使用掉E)</li></ul><p>最後要提到<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Ctrl+B</div></pre></td></tr></table></figure></p><p>可以縮合、展開左側欄，會停駐於最後打開的視窗(視窗種類參考上述)，筆者在寫code時會常使用該快捷鍵，專心寫code時會關閉左側欄<code>Ctrl+B</code>，依照需求會直接按下<code>Ctrl+Shift+E/F/...</code>。</p><h4 id="Editor編輯區塊"><a href="#Editor編輯區塊" class="headerlink" title="Editor編輯區塊"></a>Editor編輯區塊</h4><p>一定要背的快捷鍵是<code>Ctrl+P</code>，可快速搜尋目前開啟中專案裡的檔案，參考</p><img src="/Blog/2017/09/12/dotnet-core系列文章二：VSCode教學/CtrlP.gif" alt="[Ctrl_P]" title="[Ctrl_P]"><p>接下來，筆者會把快捷鍵標示出來，配合看gif動態圖檔，就會明白其用途</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//上/下搬動選取程式碼區塊</div><div class="line">Alt+Up(Down)</div></pre></td></tr></table></figure><img src="/Blog/2017/09/12/dotnet-core系列文章二：VSCode教學/AltUpDown.gif" alt="[Alt_Up_Down]" title="[Alt_Up_Down]"><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//編輯器視窗捲軸上/下移動</div><div class="line">Ctrl+Up(Down)</div></pre></td></tr></table></figure><img src="/Blog/2017/09/12/dotnet-core系列文章二：VSCode教學/CtrlUp_CtrlDown.gif" alt="[Ctrl_Up_Down]" title="[Ctrl_Up_Down]"><h4 id="通用功能"><a href="#通用功能" class="headerlink" title="通用功能"></a>通用功能</h4><p>最重要的功能，沒有之一，主角是<code>Ctrl+Shift+P</code>，執行指令，可以打一些關鍵字搜尋出相對應的功能，筆者最常用的是</p><table><thead><tr><th>關鍵字</th><th>指令全名</th><th>功用</th></tr></thead><tbody><tr><td>Keyboard</td><td>Open Keyboard ShortCuts</td><td>打開鍵盤快捷鍵設定視窗</td></tr><tr><td>Theme</td><td>Color Theme</td><td>跳出設定Theme視窗</td></tr><tr><td>Language</td><td>Change Language Mode</td><td>變更目前開啟中的編輯視窗所屬程式語言</td></tr></tbody></table><blockquote><p>列出的Command清單中可發現右邊區塊會顯示該Command相對應的快捷鍵</p></blockquote><p>以此類推，這個快捷鍵時常會用到，安裝的外掛，常常也會伴隨著已設定好的Command可以方便使用，就以<strong>Markdown</strong>相關外掛來說，例：<a href="https://marketplace.visualstudio.com/items?itemName=mdickin.markdown-shortcuts" target="_blank" rel="external">Markdown Shortcuts</a>，安裝完成後，按下<code>Ctrl+Shift+P</code>，打下關鍵字<strong>Markdown</strong>，就會有一些已設定好的功能方便使用。</p><img src="/Blog/2017/09/12/dotnet-core系列文章二：VSCode教學/CtrlShiftP.gif" alt="[Execute_Command]" title="[Execute_Command]"><h4 id="下方區塊"><a href="#下方區塊" class="headerlink" title="下方區塊"></a>下方區塊</h4><p>錯誤提示訊息視窗<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Ctrl+Shift+M</div></pre></td></tr></table></figure></p><p>執行結果顯示訊息視窗<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Ctrl+Shift+U</div></pre></td></tr></table></figure></p><p>Debug結果顯示訊息視窗<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Ctrl+Shift+Y</div></pre></td></tr></table></figure></p><p>Terminal視窗<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//原生</div><div class="line">Ctrl+`</div><div class="line">//筆者設定</div><div class="line">Ctrl+Shift+/</div></pre></td></tr></table></figure></p><p>這個下方區塊的各個視窗，快捷鍵就沒相關的記憶點，多按幾次就會記下來了，通常比較常用的是<code>Ctrl+</code> `。因為筆者發現，若外面有開啟Terminal視窗，按下該快捷鍵Focus於外面的Termial視窗，滿困擾筆者的，因此筆者有特地調整該快捷鍵，調整步驟如下：</p><ul><li>按下<code>Ctrl+Shift+P</code></li><li>搜尋<strong>Keyboard</strong></li><li>選擇<strong>Open Keyboard ShortCuts</strong></li><li>在搜尋方塊中搜尋<strong>ToggleIntegratedTerminal</strong></li><li>點擊最左側的一枝筆圖示</li><li>按下你想要設定的快捷鍵後按下<code>Enter</code></li></ul><blockquote><p>這邊要提點一下，可以先反查自己欲設定的快捷鍵是否已經有設定過(配合<strong>When</strong>的使用情境)，最好是不要設定重複快捷鍵。</p></blockquote><p>對於最常用到的<strong>Terminal</strong>視窗部份，筆者要再補充一些需注意使用情境。筆者在寫code時，焦點會在Editor編輯視窗，這時想切換至Terminal視窗下指令時，很自然地按下<code>Ctrl+Shift+/</code>。若<strong>Terminal</strong>視窗是開啟狀態下，效果會是關閉Terminal視窗，沒有達到直接可以打指令的狀況。</p><p>想要解決這個情況，必須去<strong>Keyboard ShortCuts</strong>設定中，針對<strong>FocusTerminal</strong>去設定想要的快捷鍵，筆者目前使用<code>Shift+Alt+/</code>，以下提供筆者的使用情境配置習慣。</p><div class="alert info"><p>只要想使用指令列服務，請按下<strong>FocusTeminal</strong>設定快捷鍵，想要將Terminal視窗關閉，則按下<strong>ToggleIntegratedTerminal</strong>設定快捷鍵</p></div><h2 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h2><hr><p>介紹了這麼多VSCode的實用功能，這篇還僅介紹VSCode原生有的功能，尚未加入外掛部份；無論開發哪種語言，找尋適當的外掛配合原生諸多便利功能，筆者相信寫起程式來，應該是得心應手。下篇會整理dotnet core開發相關外掛介紹。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前提情要&quot;&gt;&lt;a href=&quot;#前提情要&quot; class=&quot;headerlink&quot; title=&quot;前提情要&quot;&gt;&lt;/a&gt;前提情要&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;上一篇講到開發dotnet core相關程式，論語說「工欲善其事，必先利其器」，相當然爾，熟悉開發工具這件事情直接影響你的開發產能。因筆者現況，公司配的桌機跟自己的筆電配備上有落差，以不耗系統資源的考量下，下定決心將「Visual Studio Code」作為首選開發工具。&lt;/p&gt;
    
    </summary>
    
      <category term="dotnet core" scheme="http://eugenesu0515.github.io/categories/dotnet-core/"/>
    
    
      <category term="dotnet core" scheme="http://eugenesu0515.github.io/tags/dotnet-core/"/>
    
      <category term="vscode" scheme="http://eugenesu0515.github.io/tags/vscode/"/>
    
  </entry>
  
  <entry>
    <title>dotnet-core系列文章一：安裝</title>
    <link href="http://eugenesu0515.github.io/2017/09/11/dotnet-core%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0%E4%B8%80%EF%BC%9A%E5%AE%89%E8%A3%9D/"/>
    <id>http://eugenesu0515.github.io/2017/09/11/dotnet-core系列文章一：安裝/</id>
    <published>2017-09-11T11:12:17.000Z</published>
    <updated>2017-09-17T14:40:34.705Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前提情要"><a href="#前提情要" class="headerlink" title="前提情要"></a>前提情要</h2><hr><p>目前微軟於「2017/08/14」正式發佈dotnet core2.0.0後，實作API數比版本1足足多了兩倍之多，是該進場的時候了。</p><p>身為ASP.NET開發者，以往都會限制於IIS Web Server才能架站，dotnet core本身跨平台的特性，且宿主不限制於IIS Web Server，加上僅開啟Visual Studio Code就可開發C#相關程式(設備配備不好的情況下超適用)，上述種種因素，是該投資時間研究dotnet core的時候了。</p><a id="more"></a><h2 id="內容"><a href="#內容" class="headerlink" title="內容"></a>內容</h2><hr><p>首先，需至Microsoft Download網站下載SDK。</p><p><a href="https://www.microsoft.com/net/core" target="_blank" rel="external">dotnet core SDK</a></p><p>安裝完畢後，請打開Command line輸入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">dotnet --version</div></pre></td></tr></table></figure></p><p>測試是否正常執行，若安裝成功，會回傳<code>2.0.0</code></p><p>目前官方預設範本有</p><ul><li>Console Application</li><li>ASP.NET Core MVC</li><li>ASP.NET Core WebAPI</li><li>其他</li></ul><p>詳細範本種類可參考<a href="https://docs.microsoft.com/zh-tw/dotnet/core/tools/dotnet-new" target="_blank" rel="external">dotnet core cli-new命令</a></p><p>接著，我們來建一個實際的專案，使用console範本作示範。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">dotnet new console -o helloworldapp</div></pre></td></tr></table></figure><p>上述指令中，最後結為尾為「專案名稱」，其中<code>-o</code>表示自動以「專案名稱」建立資料夾。</p><p>建立完成後，參考以下指令來執行程式碼<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//進入該資料夾</div><div class="line">cd helloworldapp</div><div class="line">//執行程式</div><div class="line">dotnet run</div></pre></td></tr></table></figure></p><p>就可以看到以下執行結果，參考</p><img src="/Blog/2017/09/11/dotnet-core系列文章一：安裝/dotnet_core_new_console_run.jpg" alt="[dotnet_run]" title="[dotnet_run]"><h2 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h2><hr><p>dotnet core環境安裝上簡單，dotnet cli的很直覺的操作性，整體來說，本身是寫.net framework相關程式則不會有什麼學習上的障礙，那你還等什麼呢？</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前提情要&quot;&gt;&lt;a href=&quot;#前提情要&quot; class=&quot;headerlink&quot; title=&quot;前提情要&quot;&gt;&lt;/a&gt;前提情要&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;目前微軟於「2017/08/14」正式發佈dotnet core2.0.0後，實作API數比版本1足足多了兩倍之多，是該進場的時候了。&lt;/p&gt;
&lt;p&gt;身為ASP.NET開發者，以往都會限制於IIS Web Server才能架站，dotnet core本身跨平台的特性，且宿主不限制於IIS Web Server，加上僅開啟Visual Studio Code就可開發C#相關程式(設備配備不好的情況下超適用)，上述種種因素，是該投資時間研究dotnet core的時候了。&lt;/p&gt;
    
    </summary>
    
      <category term="dotnet core" scheme="http://eugenesu0515.github.io/categories/dotnet-core/"/>
    
    
      <category term="dotnet core" scheme="http://eugenesu0515.github.io/tags/dotnet-core/"/>
    
  </entry>
  
</feed>
